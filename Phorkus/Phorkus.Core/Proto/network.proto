syntax = "proto3";
option csharp_namespace = "Phorkus.Core.Proto";

import "default.proto";
import "block.proto";
import "transaction.proto";
import "consensus.proto";

enum MessageType {
    MESSAGE_TYPE_ADDR = 0;
    MESSAGE_TYPE_BLOCK = 1;
    MESSAGE_TYPE_CONSENSUS = 2;
    MESSAGE_TYPE_FILTERADD = 3;
    MESSAGE_TYPE_FILTERCLEAR = 4;
    MESSAGE_TYPE_FILTERLOAD = 5;
    MESSAGE_TYPE_GETADDR = 6;
    MESSAGE_TYPE_GETBLOCKS = 7;
    MESSAGE_TYPE_GETDATA = 8;
    MESSAGE_TYPE_GETHEADERS = 9;
    MESSAGE_TYPE_HEADERS = 10;
    MESSAGE_TYPE_IVN = 11;
    MESSAGE_TYPE_MEMPOOL = 12;
    MESSAGE_TYPE_TX = 13;
    MESSAGE_TYPE_VERACK = 14;
    MESSAGE_TYPE_VERSION = 15;
}

message IpEndPoint {
    string address = 1;
    uint32 port = 2;
}

message AddrMessage {
    message NetworkAddressWithTime {
        uint64 timestamp = 1;
        uint64 services = 2;
        IpEndPoint endpoint = 3;
    }
    repeated NetworkAddressWithTime address = 1;
}

message BlockHeadersMessage {
    repeated BlockHeader headers = 1;
}

message BlockMessage {
    Block block = 2;
}

message ConsensusMessage {
    message ConsensusPayloadUnsigned {
        uint32 version = 1;
        UInt256 prev_hash = 2;
        uint64 block_index = 3;
        uint32 validator_index = 4;
        uint64 timestamp = 5;
        ConsensusPayloadCustomData data = 6;
    }
    ConsensusPayloadUnsigned unsigned = 1;
}

message FilterAddrMessage {
    bytes data = 1;
}

message FilterClearMessage {
}

message FilterLoadMessage {
    bytes filter = 1;
    uint32 k = 2;
    uint32 tweak = 3;
}

message GetAddrMessage {
}

message GetBlockHeadersMessage {
    repeated UInt256 hash_start = 1;
    UInt256 hash_stop = 2;
}

message GetBlocksMessage {
    repeated UInt256 hash_start = 1;
    UInt256 hash_stop = 2;
}

enum InventoryType {
    INVENTORY_TYPE_UNKNOWN = 0x00;
    INVENTORY_TYPE_TRANSACTION = 0x01;
    INVENTORY_TYPE_BLOCK = 0x02;
    INVENTORY_TYPE_CONSENSUS = 0xe0;
}

message GetDataMessage {
    InventoryType type = 1;
    repeated UInt256 hashes = 2;
}

message MemPoolMessage {
}

message TransactionMessage {
    Transaction transaction = 1;
}

message VerAckMessage {
}

message VersionMessage {
    uint32 version = 1;
    uint64 services = 2;
    uint64 timestamp = 3;
    uint32 port = 4;
    uint32 nonce = 5;
    string user_agent = 6;
    uint64 current_block_index = 7;
    bool relay = 8;
}
