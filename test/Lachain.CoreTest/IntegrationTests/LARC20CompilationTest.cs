using System;
using System.IO;
using System.Reflection;
using Lachain.Core.Blockchain.VM;
using Lachain.Core.CLI;
using Lachain.Core.Config;
using Lachain.Core.DI;
using Lachain.Core.DI.Modules;
using Lachain.Core.DI.SimpleInjector;
using Lachain.Proto;
using Lachain.Storage.State;
using Lachain.Utility;
using Lachain.Utility.Utils;
using Lachain.UtilityTest;
using NUnit.Framework;
using Org.BouncyCastle.Math;

namespace Lachain.CoreTest.IntegrationTests
{
    public class LARC20CompilationTest
    {
        private IContainer? _container;

        public LARC20CompilationTest()
        {
            var containerBuilder = new SimpleInjectorContainerBuilder(new ConfigManager(
                Path.Join(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "config.json"),
                new RunOptions()
            ));

            containerBuilder.RegisterModule<BlockchainModule>();
            containerBuilder.RegisterModule<ConfigModule>();
            containerBuilder.RegisterModule<StorageModule>();

            _container = containerBuilder.Build();
        }

        [SetUp]
        public void Setup()
        {
            _container?.Dispose();
            TestUtils.DeleteTestChainData();

            var containerBuilder = new SimpleInjectorContainerBuilder(new ConfigManager(
                Path.Join(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "config.json"),
                new RunOptions()
            ));

            containerBuilder.RegisterModule<BlockchainModule>();
            containerBuilder.RegisterModule<ConfigModule>();
            containerBuilder.RegisterModule<StorageModule>();

            _container = containerBuilder.Build();
        }

        [TearDown]
        public void Teardown()
        {
            _container?.Dispose();
            TestUtils.DeleteTestChainData();
        }
        
        [Test]
        public void Test_VirtualMachine_InvokeERC20Contract()
        {
            var stateManager = _container.Resolve<IStateManager>();

            var hash = UInt160Utils.Zero;
            var contract = new Contract
            (
                hash,
                "0061736d01000000016a0d60037f7f7f0060027f7f0060017f006000017f60037f7f7f017f60017f017f60000060077e7e7e7e7e7e7e017f60087e7e7e7e7e7e7e7f017f600a7e7e7e7e7e7e7e7e7e7e017f60077e7e7e7e7e7e7f017f60047e7e7e7f017f600b7e7e7e7e7e7e7e7e7e7e7f017f02bf010a03656e761063727970746f5f6b656363616b323536000003656e760c6c6f61645f73746f72616765000103656e760a7365745f72657475726e000103656e760b73797374656d5f68616c74000203656e760c736176655f73746f72616765000103656e760977726974655f6c6f67000103656e760a6765745f73656e646572000203656e760c6765745f6d736776616c7565000203656e760d6765745f63616c6c5f73697a65000303656e760f636f70795f63616c6c5f76616c7565000003131200010000000405060708090a07080b090c060405017001010105030100020608017f01418080040b071202066d656d6f72790200057374617274001b0ae359122e0002402002450d000340200020012d00003a0000200041016a2100200141016a21012002417f6a22020d000b0b0b240002402001450d00034020004200370300200041086a21002001417f6a22010d000b0b0b2d002000411f6a21000340200120002d00003a0000200141016a21012000417f6a21002002417f6a22020d000b0b2d002001411f6a21010340200120002d00003a00002001417f6a2101200041016a21002002417f6a22020d000b0b29002001417f6a21010340200120026a20002d00003a0000200041016a21002002417f6a22020d000b0b7e01017f200120006c220141086a10102203200036020420032000360200200341086a2100024002402002417f460d002001450d010340200020022d00003a0000200041016a2100200241016a21022001417f6a22010d000c020b0b2001450d000340200041003a0000200041016a21002001417f6a22010d000b0b20030ba60101047f418080042101024003400240200128020c0d002001280208220220004f0d020b200128020022010d000b41002101410028020821020b02402002200041076a41787122036b22024118490d00200120036a41106a22002001280200220436020002402004450d00200420003602040b2000200241706a3602082000410036020c2000200136020420012000360200200120033602080b2001410136020c200141106a0b2e004100410036028080044100410036028480044100410036028c800441003f0041107441f0ff7b6a36028880040b860a04047f047e017f047e230041b0016b22072108200724000240024002402000200242ffffffff0f8384200184500d004101450d01200741406a220722092400200741286a2001370300200741206a2000370300200741306a20023e0200200741186a4200370300200742003703102007420037030820074200370300200941606a2209220a240020074138200910002009290300210b200941086a290300210c200941106a290300210d200941186a290300210e200a41606a220722092400200741186a200e3703002007200d3703102007200c3703082007200b370300200941606a2209220a24002007200910012009290300220e20035a200941086a290300220b20045a200b200451220f1b200941106a290300220c20055a200941186a290300220d20065a200d2006511b200c200585200d20068584501b0d02412241014130100f2209280200410020091b413f6a41607141246a220a10102107200841a0f38dc6003602a401200841a4016a20074104100e200741046a220f200a410376100b200841203602a801200841a8016a200f4104100d20082009280200410020091b220f3602ac01200841ac016a200741246a4104100d200741c4006a200941086a200f100a2007200a100241011003000b412141014100100f2209280200410020091b413f6a41607141246a220a10102107200841a0f38dc600360204200841046a20074104100e200741046a220f200a410376100b20084120360208200841086a200f4104100d20082009280200410020091b220f36020c2008410c6a200741246a4104100d200741c4006a200941086a200f100a2007200a100241011003000b200841b0016a240041000f0b200a41406a220722092400200741286a2001370300200741206a2000370300200741306a20023e0200200741186a4200370300200742003703102007420037030820074200370300200941606a2209220a2400200741382009100020092903002110200941086a2903002111200941106a2903002112200941186a2903002113200a41606a220722092400200841106a41186a200d20067d200c200554ad7d200c20057d220c200e200354220a200b200454200f1bad220d54ad7d370300200741186a20133703002007201237031020072011370308200720103703002008200c200d7d3703202008200b20047d200aad7d3703182008200e20037d3703102007200841106a1004200941606a220722092400200741186a4200370300200742003703102007420037030820074202370300200941606a2209220a2400200720091001200941186a290300210e200941106a290300210c2009290300210d200941086a290300210b200a41606a22072400200741186a4200370300200742003703102007420037030820074202370300200841306a41186a200e20067d200c200554ad7d200c20057d220c200d2003542209200b200454200b2004511bad220e54ad7d3703002008200c200e7d3703402008200b20047d2009ad7d3703382008200d20037d3703302007200841306a10044120101022074104100b200841d0006a41186a2006370300200820053703602008200437035820082003370350200841d0006a20074120100d4120101022094104100b2008200137037820082000370370200820023e028001200841f0006a20094114100d4120101022094104100b20084200370390012008420037038801200842003e02980120084188016a20094114100d200741201005200841b0016a240041000b990504047f037e017f047e230041306b220824002008220941186a10062009200941186a41086a220a290300370308200920092903183703002009200941186a41106a220b3502003e021002400240024041000d00200941086a290300210c200941106a350200210d2009290300210e200841606a2208220f2400200941186a10062008200a290300370308200820092903183703002008200b3502003e02104101450d01200841106a3502002110200841086a290300211120082903002112200f41406a2208220a2400200841286a2011370300200841206a2012370300200841306a20103e0200200841186a4200370300200842003703102008420037030820084201370300200a41606a220a220b240020084138200a1000200a2903002110200a41086a2903002111200a41106a2903002112200a41186a2903002113200b41406a2208220a2400200841286a2001370300200841206a2000370300200841306a20023e0200200841186a2013370300200820123703102008201137030820082010370300200a41606a220a220b240020084138200a1000200a2903002110200a41086a2903002111200a41106a2903002112200a41186a2903002113200b41606a2208220a2400200841186a2013370300200820123703102008201137030820082010370300200a41606a220a24002008200a1001200e200c200d200020012002200a290300221020037c2211200a41086a290300220320047c20112010542208ad7c2204200a41106a290300221020057c22052008200420035420042003511bad7c2203200a41186a29030020067c2005201054ad7c2003200554ad7c10142208450d02200941306a240020080f0b200941306a240041000f0b200941306a240041000f0b200741013a0000200941306a240041000bd80602057f047e23004190016b220a210b200a2400024002402000200242ffffffff0f8384200184500d002003200542ffffffff0f83842004844200520d014122410141b001100f220c2802004100200c1b413f6a41607141246a220d1010210a200b41a0f38dc60036028401200b4184016a200a4104100e200a41046a220e200d410376100b200b412036028801200b4188016a200e4104100d200b200c2802004100200c1b220e36028c01200b418c016a200a41246a4104100d200a41c4006a200c41086a200e100a200a200d100241011003000b41244101418001100f220c2802004100200c1b413f6a41607141246a220d1010210a200b41a0f38dc600360204200b41046a200a4104100e200a41046a220e200d410376100b200b4120360208200b41086a200e4104100d200b200c2802004100200c1b220e36020c200b410c6a200a41246a4104100d200a41c4006a200c41086a200e100a200a200d100241011003000b200a41406a220a220c2400200a41286a2001370300200a41206a2000370300200a41306a20023e0200200a41186a4200370300200a4200370310200a4200370308200a4201370300200c41606a220c220d2400200a4138200c1000200c290300210f200c41086a2903002110200c41106a2903002111200c41186a2903002112200d41406a220a220c2400200a41286a2004370300200a41206a2003370300200a41306a20053e0200200a41186a2012370300200a2011370310200a2010370308200a200f370300200c41606a220c220d2400200a4138200c1000200c290300210f200c41086a2903002110200c41106a2903002111200c41186a2903002112200d41606a220a2400200b41106a41186a2009370300200a41186a2012370300200a2011370310200a2010370308200a200f370300200b2008370320200b2007370318200b2006370310200a200b41106a100441201010220a4104100b200b41306a41186a2009370300200b2008370340200b2007370338200b2006370330200b41306a200a4120100d41201010220c4104100b200b2001370358200b2000370350200b20023e0260200b41d0006a200c4114100d41201010220c4104100b200b2004370370200b2003370368200b20053e0278200b41e8006a200c4114100d200a41201005200b4190016a240041000bf30202037f017e23004180016b22072400200741406a220822092400200841286a2001370300200841206a2000370300200841306a20023e0200200841186a4200370300200842003703102008420037030820084201370300200841382007220741e0006a1000200741e0006a41086a2903002102200741e0006a41106a2903002100200741e0006a41186a29030021012007290360210a200941406a22082400200841286a2004370300200841206a2003370300200841306a20053e0200200841186a200137030020082000370310200820023703082008200a37030020084138200741c0006a1000200741206a41186a200741c0006a41186a2903003703002007200741c0006a41106a2903003703302007200741c0006a41086a29030037032820072007290340370320200741206a20071001200641186a200741186a2903003703002006200741106a2903003703102006200741086a2903003703082006200729030037030020074180016a240041000bc90802057f087e230041a0016b2207210820072400024002402000200242ffffffff0f8384200184500d0041010d01200841a0016a240041000f0b411f410141e000100f2209280200410020091b413f6a41607141246a220a10102107200841a0f38dc6003602940120084194016a20074104100e200741046a220b200a410376100b200841203602980120084198016a200b4104100d20082009280200410020091b220b36029c012008419c016a200741246a4104100d200741c4006a200941086a200b100a2007200a100241011003000b200741606a220722092400200741186a4200370300200742003703102007420037030820074202370300200941606a2209220a2400200720091001200941186a290300210c200941106a290300210d200941086a290300210e2009290300210f200a41606a220722092400200741186a42003703002007420037031020074200370308200742023703002008200f20037c22103703002008200e20047c2010200f54220aad7c220f3703082008200d20057c2210200a200f200e54200f200e511bad7c220e370310200841186a200c20067c2010200d54ad7c200e201054ad7c370300200720081004200941406a220722092400200741286a2001370300200741206a2000370300200741306a20023e0200200741186a4200370300200742003703102007420037030820074200370300200941606a2209220a240020074138200910002009290300210e200941086a290300210d200941106a290300210f200941186a2903002110200a41606a220722092400200741186a20103703002007200f3703102007200d3703082007200e370300200941606a2209220a2400200720091001200941186a290300210c200941106a290300210d200941086a290300210e2009290300210f200a41406a220722092400200741286a2001370300200741206a2000370300200741306a20023e0200200741186a4200370300200742003703102007420037030820074200370300200941606a2209220a2400200741382009100020092903002110200941086a2903002111200941106a2903002112200941186a2903002113200a41606a22072400200741186a20133703002007201237031020072011370308200720103703002008200f20037c22103703202008200e20047c2010200f542209ad7c220f3703282008200d20057c22102009200f200e54200f200e511bad7c220e370330200841206a41186a200c20067c2010200d54ad7c200e201054ad7c3703002007200841206a10044120101022074104100b200841c0006a41186a2006370300200820053703502008200437034820082003370340200841c0006a20074120100d4120101022094104100b2008420037036820084200370360200842003e0270200841e0006a20094114100d4120101022094104100b200820013703800120082000370378200820023e028801200841f8006a20094114100d200741201005200841a0016a240041000bdd0605027f037e027f017e017f230041c0006b220824002008220941286a10062009200941286a41086a290300370308200920092903283703002009200941286a41106a3502003e0210024002400240024041000d00200941106a350200210a200941086a290300210b2009290300210c200841406a2208220d2400200841286a200b370300200841206a200c370300200841306a200a3e0200200841186a4200370300200842003703102008420037030820084201370300200d41606a220d220e240020084138200d1000200d290300210a200d41086a290300210b200d41106a290300210c200d41186a290300210f200e41406a2208220d2400200841286a2001370300200841206a2000370300200841306a20023e0200200841186a200f3703002008200c3703102008200b3703082008200a370300200d41606a220d220e240020084138200d1000200d290300210a200d41086a290300210b200d41106a290300210c200d41186a290300210f200e41606a2208220d2400200841186a200f3703002008200c3703102008200b3703082008200a370300200d41606a220d220e24002008200d1001200d290300220f20035a200d41086a290300220b20045a200b20045122101b200d41106a290300220c20055a200d41186a290300220a20065a200a2006511b200c200585200a20068584501b450d01200e41606a22082400200941286a10062008200941286a41086a290300370308200820092903283703002008200941286a41106a3502003e02104101450d022008290300200841086a290300200841106a350200200020012002200f20037d200b20047d200f2003542208ad7d200c20057d22032008200b20045420101bad22047d200a20067d200c200554ad7d2003200454ad7d10142208450d03200941c0006a240020080f0b200941c0006a240041000f0b4125410141e001100f220d2802004100200d1b413f6a41607141246a220710102108200941a0f38dc60036021c2009411c6a20084104100e200841046a220e2007410376100b20094120360220200941206a200e4104100d2009200d2802004100200d1b220e360224200941246a200841246a4104100d200841c4006a200d41086a200e100a20082007100241011003000b200941c0006a240041000f0b200741013a0000200941c0006a240041000bec0101027f230041e0006b22042400200441406a22052400200541286a2001370300200541206a2000370300200541306a20023e0200200541186a4200370300200542003703102005420037030820054200370300200541382004220441c0006a1000200441206a41186a200441c0006a41186a2903003703002004200441c0006a41106a2903003703302004200441c0006a41086a29030037032820042004290340370320200441206a20041001200341186a200441186a2903003703002003200441106a2903003703102003200441086a29030037030820032004290300370300200441e0006a240041000bb80d04047f047e017f047e230041c0016b220a210b200a240002400240024002402000200242ffffffff0f8384200184500d002003200542ffffffff0f83842004844200510d014101450d02200a41406a220a220c2400200a41286a2001370300200a41206a2000370300200a41306a20023e0200200a41186a4200370300200a4200370310200a4200370308200a4200370300200c41606a220c220d2400200a4138200c1000200c290300210e200c41086a290300210f200c41106a2903002110200c41186a2903002111200d41606a220a220c2400200a41186a2011370300200a2010370310200a200f370308200a200e370300200c41606a220c220d2400200a200c1001200c290300221120065a200c41086a290300220e20075a200e20075122121b200c41106a290300220f20085a200c41186a290300221020095a20102009511b200f200885201020098584501b0d034126410141f002100f220c2802004100200c1b413f6a41607141246a220d1010210a200b41a0f38dc6003602b401200b41b4016a200a4104100e200a41046a2212200d410376100b200b41203602b801200b41b8016a20124104100d200b200c2802004100200c1b22123602bc01200b41bc016a200a41246a4104100d200a41c4006a200c41086a2012100a200a200d100241011003000b41254101419002100f220c2802004100200c1b413f6a41607141246a220d1010210a200b41a0f38dc600360208200b41086a200a4104100e200a41046a2212200d410376100b200b412036020c200b410c6a20124104100d200b200c2802004100200c1b2212360210200b41106a200a41246a4104100d200a41c4006a200c41086a2012100a200a200d100241011003000b4123410141c002100f220c2802004100200c1b413f6a41607141246a220d1010210a200b41a0f38dc600360214200b41146a200a4104100e200a41046a2212200d410376100b200b4120360218200b41186a20124104100d200b200c2802004100200c1b221236021c200b411c6a200a41246a4104100d200a41c4006a200c41086a2012100a200a200d100241011003000b200b41c0016a240041000f0b200d41406a220a220c2400200a41286a2001370300200a41206a2000370300200a41306a20023e0200200a41186a4200370300200a4200370310200a4200370308200a4200370300200c41606a220c220d2400200a4138200c1000200c2903002113200c41086a2903002114200c41106a2903002115200c41186a2903002116200d41606a220a220c2400200b41206a41186a201020097d200f200854ad7d200f20087d220f2011200654220d200e20075420121bad221054ad7d370300200a41186a2016370300200a2015370310200a2014370308200a2013370300200b200f20107d370330200b200e20077d200dad7d370328200b201120067d370320200a200b41206a1004200c41406a220a220c2400200a41286a2004370300200a41206a2003370300200a41306a20053e0200200a41186a4200370300200a4200370310200a4200370308200a4200370300200c41606a220c220d2400200a4138200c1000200c290300210e200c41086a290300210f200c41106a2903002110200c41186a2903002111200d41606a220a220c2400200a41186a2011370300200a2010370310200a200f370308200a200e370300200c41606a220c220d2400200a200c1001200c41186a2903002113200c41106a290300210f200c41086a290300210e200c2903002110200d41406a220a220c2400200a41286a2004370300200a41206a2003370300200a41306a20053e0200200a41186a4200370300200a4200370310200a4200370308200a4200370300200c41606a220c220d2400200a4138200c1000200c2903002111200c41086a2903002114200c41106a2903002115200c41186a2903002116200d41606a220a2400200a41186a2016370300200a2015370310200a2014370308200a2011370300200b201020067c2211370340200b200e20077c2011201054220cad7c2210370348200b200f20087c2211200c2010200e542010200e511bad7c220e370350200b41c0006a41186a201320097c2011200f54ad7c200e201154ad7c370300200a200b41c0006a100441201010220a4104100b200b41e0006a41186a2009370300200b2008370370200b2007370368200b2006370360200b41e0006a200a4120100d41201010220c4104100b200b200137038801200b200037038001200b20023e029001200b4180016a200c4114100d41201010220c4104100b200b20043703a001200b200337039801200b20053e02a801200b4198016a200c4114100d200a41201005200b41c0016a240041000b890703047f047e017f230041306b220b210c200b24000240024002400240024020002001200220032004200520062007200820091019220d0d00200b41606a220b220d2400200c41186a1006200b200c41186a41086a290300370308200b200c290318370300200b200c41186a41106a3502003e02104101450d01200b41106a3502002103200b41086a2903002104200b2903002105200d41406a220b220d2400200b41286a2001370300200b41206a2000370300200b41306a20023e0200200b41186a4200370300200b4200370310200b4200370308200b4201370300200d41606a220d220e2400200b4138200d1000200d290300210f200d41086a2903002110200d41106a2903002111200d41186a2903002112200e41406a220b220d2400200b41286a2004370300200b41206a2005370300200b41306a20033e0200200b41186a2012370300200b2011370310200b2010370308200b200f370300200d41606a220d220e2400200b4138200d1000200d2903002103200d41086a2903002104200d41106a2903002105200d41186a290300210f200e41606a220b220d2400200b41186a200f370300200b2005370310200b2004370308200b2003370300200d41606a220d220e2400200b200d1001200d290300220f20065a200d41086a290300220420075a200420075122131b200d41106a290300220520085a200d41186a290300220320095a20032009511b2005200885200320098584501b450d02200e41606a220b2400200c41186a1006200b200c41186a41086a290300370308200b200c290318370300200b200c41186a41106a3502003e02104101450d03200020012002200b290300200b41086a290300200b41106a350200200f20067d200420077d200f200654220bad7d200520087d2206200b200420075420131bad22077d200320097d2005200854ad7d2006200754ad7d1014220b450d04200c41306a2400200b0f0b200c41306a2400200d0f0b200c41306a240041000f0b4128410141a003100f220d2802004100200d1b413f6a41607141246a220a1010210b200c41a0f38dc60036020c200c410c6a200b4104100e200b41046a220e200a410376100b200c4120360210200c41106a200e4104100d200c200d2802004100200d1b220e360214200c41146a200b41246a4104100d200b41c4006a200d41086a200e100a200b200a100241011003000b200c41306a240041000f0b200a41013a0000200c41306a240041000be11602047f0a7e230041b0066b22002400200041086a10070240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002400240024002402000290308200041186a29030084200041106a290300200041206a29030084844200520d0010114100100822013602cc0341002001101022023602d0034100200120021009200141034d0d1e4100200228020022033602c8032001417c6a2101200241046a2102024002400240024002400240024002400240024020034185fafb1e4a0d000240200341a3af89be7d4a0d002003419d85ffe47a460d0a20034189bc9d9d7b460d09200341a98bf0dc7b470d2920014120490d122002200041b0016a4118100c2001ad423f580d13200041b0016a41106a3502002104200041b0016a41086a290300210520002903b0012106200241206a200041c8016a4120100c200041c8016a41186a2903002107200041c8016a41106a2903002108200041c8016a41086a290300210920002903c801210a20004190066a1006200020004190066a41086a290300220b3703f8052000200029039006220c3703f005200020004190066a41106a350200220d3e028006200c200b200d200620052004200a200920082007101922010d02200041013a00ef0141000d030c2b0b200341a4af89be7d460d05200341a3f0caeb7d460d0720034198acb4e87d470d2820004190066a41186a4200370300200042003703a0062000420037039806200042023703900620004190066a200041f0056a1001200041d0056a41186a200041f0056a41186a290300370300200020004180066a2903003703e0052000200041f8056a2903003703d805200020002903f0053703d0054100450d2741004100100241011003000b0240200341dcc5b5f7034a0d00200341c082bfc801460d04200341f0c08a8c03460d0620034186fafb1e470d28200041c0006a4280dc95dbf68ddda0cc003703002000420037033820004200370330200042003703284100450d0b41004100100241011003000b0240200341b8a0cd8c054a0d00200341ddc5b5f703460d0320034195b1ef8c04470d28200041e8006a42808080808080c0a0cc003703002000420037036020004200370358200042003703504100450d0d41004100100241011003000b0240200341b9a0cd8c05460d00200341b1f894bf06470d28200041123a004f4100450d0c41004100100241011003000b20014120490d0d2002200041f0006a4118100c2001ad423f580d0e200041f0006a41106a3502002104200041f0006a41086a290300210520002903702106200241206a20004188016a4120100c20062005200420002903880120004188016a41086a29030020004188016a41106a29030020004188016a41186a290300200041af016a1013450d0f41004100100241011003000b2001450d280b41004100100241011003000b20014120490d0f2002200041f0016a4118100c2001ad423f580d10200041f0016a41106a3502002104200041f0016a41086a290300210520002903f0012106200241206a20004188026a4118100c20062005200420002903880220004188026a41086a29030020004188026a41106a350200200041a0026a1015450d1141004100100241011003000b20014120490d112002200041c0026a4118100c2001ad423f580d12200041c0026a41106a3502002104200041c0026a41086a290300210520002903c0022106200241206a200041d8026a4120100c024020062005200420002903d802200041d8026a41086a290300200041d8026a41106a290300200041d8026a41186a290300101622010d00200041013a00ff02410021010b2001450d1341004100100241011003000b20014120490d13200220004180036a4118100c2001ad423f580d1420004180036a41106a350200210420004180036a41086a29030021052000290380032106200241206a20004198036a4120100c20062005200420002903980320004198036a41086a29030020004198036a41106a29030020004198036a41186a290300200041bf036a1017450d1541004100100241011003000b20014120490d152002200041c0036a4118100c20002903c003200041c8036a290300200041d0036a350200200041d8036a1018450d1641004100100241011003000b20014120490d162002200041f8036a4118100c2001ad2204423f580d17200041f8036a41106a3502002105200041f8036a41086a290300210620002903f8032107200241206a20004190046a4118100c200442df00580d1820004190046a41106a350200210420004190046a41086a29030021082000290390042109200241c0006a200041a8046a4120100c20072006200520092008200420002903a804200041b0046a290300200041b8046a290300200041c0046a290300200041cf046a101a450d1941004100100241011003000b20014120490d192002200041d0046a4118100c2001ad423f580d1a200041d0046a41106a3502002104200041d0046a41086a290300210520002903d0042106200241206a200041e8046a4120100c200041e8046a41186a2903002107200041e8046a41106a2903002108200041e8046a41086a290300210920002903e804210a20004190066a1006200020004190066a41086a290300220b3703f8052000200029039006220c3703f005200020004190066a41106a350200220d3e02800602400240200c200b200d200620052004200a200920082007101422010d00200041013a008f0541000d010c220b2001450d210b41004100100241011003000b20014120490d1a200220004190056a4118100c2001ad423f580d1b20004190056a41106a350200210420004190056a41086a29030021052000290390052106200241206a200041a8056a4120100c024020062005200420002903a805200041a8056a41086a290300200041a8056a41106a290300200041a8056a41186a290300101222010d00200041013a00cf05410021010b2001450d1c41004100100241011003000b41004100100241011003000b4120101022014104100b200041286a20014120100e20014120100241001003000b4120101022014104100b2001411f6a20002d004f3a000020014120100241001003000b4120101022014104100b200041d0006a20014120100e20014120100241001003000b200041b0066a240041020f0b200041b0066a240041020f0b4120101022014104100b2001411f6a20002d00af013a000020014120100241001003000b200041b0066a240041020f0b200041b0066a240041020f0b200041b0066a240041020f0b200041b0066a240041020f0b4120101022014104100b200041a0026a20014120100d20014120100241001003000b200041b0066a240041020f0b200041b0066a240041020f0b4120101022014104100b2001411f6a20002d00ff023a000020014120100241001003000b200041b0066a240041020f0b200041b0066a240041020f0b4120101022014104100b2001411f6a20002d00bf033a000020014120100241001003000b200041b0066a240041020f0b4120101022014104100b200041d8036a20014120100d20014120100241001003000b200041b0066a240041020f0b200041b0066a240041020f0b200041b0066a240041020f0b4120101022014104100b2001411f6a20002d00cf043a000020014120100241001003000b200041b0066a240041020f0b200041b0066a240041020f0b200041b0066a240041020f0b200041b0066a240041020f0b4120101022014104100b2001411f6a20002d00cf053a000020014120100241001003000b4120101022014104100b200041d0056a20014120100d20014120100241001003000b41004100100241011003000b4120101022014104100b2001411f6a20002d008f053a000020014120100241001003000b4120101022014104100b2001411f6a20002d00ef013a000020014120100241001003000b0bcf03010041000bc80345524332303a206275726e2066726f6d20746865207a65726f206164647265737300000000000000000000000000000045524332303a206275726e20616d6f756e7420657863656564732062616c616e6365000000000000000000000000000045524332303a206d696e7420746f20746865207a65726f20616464726573730045524332303a20617070726f76652066726f6d20746865207a65726f206164647265737300000000000000000000000045524332303a20617070726f766520746f20746865207a65726f2061646472657373000000000000000000000000000045524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f000000000000000000000045524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373000000000000000000000045524332303a207472616e7366657220746f20746865207a65726f20616464726573730000000000000000000000000045524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63650000000000000000000045524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636500740970726f647563657273010c70726f6365737365642d62790105636c616e675431312e302e3120286769743a2f2f6769746875622e636f6d2f6c6c766d2f6c6c766d2d70726f6a65637420313365343336396337333335356136633561333166633161313131356663376336393734336164612900e705046e616d6501df051c001063727970746f5f6b656363616b323536010c6c6f61645f73746f72616765020a7365745f72657475726e030b73797374656d5f68616c74040c736176655f73746f72616765050977726974655f6c6f67060a6765745f73656e646572070c6765745f6d736776616c7565080d6765745f63616c6c5f73697a65090f636f70795f63616c6c5f76616c75650a085f5f6d656d6370790b085f5f627a65726f380c0b5f5f62653332746f6c654e0d0b5f5f6c654e746f626533320e0a5f5f6c654e746f62654e0f0a766563746f725f6e657710085f5f6d616c6c6f63110b5f5f696e69745f68656170122e45524332303a3a45524332303a3a66756e6374696f6e3a3a5f6275726e5f5f616464726573735f75696e74323536133a45524332303a3a45524332303a3a66756e6374696f6e3a3a696e637265617365416c6c6f77616e63655f5f616464726573735f75696e74323536143945524332303a3a45524332303a3a66756e6374696f6e3a3a5f617070726f76655f5f616464726573735f616464726573735f75696e74323536153245524332303a3a45524332303a3a66756e6374696f6e3a3a616c6c6f77616e63655f5f616464726573735f61646472657373162e45524332303a3a45524332303a3a66756e6374696f6e3a3a5f6d696e745f5f616464726573735f75696e74323536173a45524332303a3a45524332303a3a66756e6374696f6e3a3a6465637265617365416c6c6f77616e63655f5f616464726573735f75696e74323536182a45524332303a3a45524332303a3a66756e6374696f6e3a3a62616c616e63654f665f5f61646472657373193a45524332303a3a45524332303a3a66756e6374696f6e3a3a5f7472616e736665725f5f616464726573735f616464726573735f75696e743235361a3d45524332303a3a45524332303a3a66756e6374696f6e3a3a7472616e7366657246726f6d5f5f616464726573735f616464726573735f75696e743235361b057374617274"
                    .HexToBytes()
            );
            if (!VirtualMachine.VerifyContract(contract.ByteCode))
                throw new Exception("Unable to validate smart-contract code");

            var snapshot = stateManager.NewSnapshot();
            snapshot.Contracts.AddContract(UInt160Utils.Zero, contract);
            stateManager.Approve();

            Console.WriteLine("Contract Hash: " + hash.ToHex());

            for (var i = 0; i < 1; ++i)
            {
                var currentTime = TimeUtils.CurrentTimeMillis();
                var currentSnapshot = stateManager.NewSnapshot();

                var sender = "0x6bc32575acb8754886dc283c2c8ac54b1bd93195".HexToBytes().ToUInt160();
                var to = "0xfd893ce89186fc6861d339cb6ab5d75458e3daf3".HexToBytes().ToUInt160();

                var transactionReceipt = new TransactionReceipt();
                transactionReceipt.Transaction = new Transaction();
                transactionReceipt.Transaction.Value = 0.ToUInt256();
                var context = new InvocationContext(sender, currentSnapshot, transactionReceipt);

                {
                    // ERC-20: name #1#
                    Console.WriteLine("\nERC-20: name()");
                    var input = ContractEncoder.Encode("name()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {"LAtoken"}, {System.Text.Encoding.Default.GetString(status.ReturnValue!)}");
                }
                {
                    // ERC-20: symbol #1#
                    Console.WriteLine("\nERC-20: symbol()");
                    var input = ContractEncoder.Encode("symbol()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {"LA"}, {System.Text.Encoding.Default.GetString(status.ReturnValue!)}");
                }
                {
                    // ERC-20: decimals #1#
                    Console.WriteLine("\nERC-20: decimals()");
                    var input = ContractEncoder.Encode("decimals()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {18}, {new BigInteger(status.ReturnValue!)}");
                }
                {
                    // ERC-20: totalSupply #1#
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {0}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // mint #1#
                    Console.WriteLine($"\nERC-20: mint({sender.ToHex()},{Money.FromDecimal(100)})");
                    var input = ContractEncoder.Encode("mint(address,uint256)", sender, Money.FromDecimal(100));
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: totalSupply #1#
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {100}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: balanceOf #1#
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {100}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: transfer #1#
                    Console.WriteLine($"\nERC-20: transfer({to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("transfer(address,uint256)", to, Money.FromDecimal(50));
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: balanceOf #1#
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {50}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: balanceOf #1#
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {50}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: approve #1#
                    Console.WriteLine($"\nERC-20: approve({to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("approve(address,uint256)", to, Money.FromDecimal(50));
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: allowance #1#
                    Console.WriteLine($"\nERC-20: allowance({sender.ToHex()},{to.ToHex()})");
                    var input = ContractEncoder.Encode("allowance(address,address)", sender, to);
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {50}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: increaseAllowance #1#
                    Console.WriteLine($"\nERC-20: increaseAllowance({to.ToHex()},{Money.FromDecimal(10)})");
                    var input = ContractEncoder.Encode("increaseAllowance(address,uint256)", to, Money.FromDecimal(10));
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: allowance #1#
                    Console.WriteLine($"\nERC-20: allowance({sender.ToHex()},{to.ToHex()})");
                    var input = ContractEncoder.Encode("allowance(address,address)", sender, to);
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {60}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: decreaseAllowance #1#
                    Console.WriteLine($"\nERC-20: decreaseAllowance({to.ToHex()},{Money.FromDecimal(10)})");
                    var input = ContractEncoder.Encode("decreaseAllowance(address,uint256)", to, Money.FromDecimal(10));
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: allowance #1#
                    Console.WriteLine($"\nERC-20: allowance({sender.ToHex()},{to.ToHex()})");
                    var input = ContractEncoder.Encode("allowance(address,address)", sender, to);
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {50}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: transferFrom #1#
                    Console.WriteLine($"\nERC-20: transferFrom({sender.ToHex()},{to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("transferFrom(address,address,uint256)", sender, to,
                        Money.FromDecimal(50));
                    // Console.WriteLine($"ABI: {input.ToHex()}");

                    // change sender
                    context = new InvocationContext(to, context.Snapshot, transactionReceipt);

                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: balanceOf #1#
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {0}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: balanceOf #1#
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {100}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // burn #1#
                    Console.WriteLine($"\nERC-20: burn({to.ToHex()},{Money.FromDecimal(30)})");
                    var input = ContractEncoder.Encode("burn(address,uint256)", to, Money.FromDecimal(30));
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: totalSupply #1#
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {70}, {status.ReturnValue!.ToHex()}");
                }
                {
                    // ERC-20: balanceOf #1#
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {70}, {status.ReturnValue!.ToHex()}");
                }

                stateManager.Approve();
            exit_mark:
                var elapsedTime = TimeUtils.CurrentTimeMillis() - currentTime;
                Console.WriteLine("Elapsed Time: " + elapsedTime + "ms");
            }
        }
    }
}