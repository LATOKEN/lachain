using System;
using System.IO;
using System.Reflection;
using Lachain.Core.Blockchain.VM;
using Lachain.Core.CLI;
using Lachain.Core.Config;
using Lachain.Core.DI;
using Lachain.Core.DI.Modules;
using Lachain.Core.DI.SimpleInjector;
using Lachain.Proto;
using Lachain.Storage.State;
using Lachain.Utility;
using Lachain.Utility.Utils;
using Lachain.UtilityTest;
using NUnit.Framework;

namespace Lachain.CoreTest.IntegrationTests
{
    public class VirtualMachineTest
    {
        private IContainer _container;

        [SetUp]
        public void Setup()
        {
            TestUtils.DeleteTestChainData();

            var containerBuilder = new SimpleInjectorContainerBuilder(new ConfigManager(
                Path.Join(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "config.json"),
                new RunOptions()
            ));

            containerBuilder.RegisterModule<BlockchainModule>();
            containerBuilder.RegisterModule<ConfigModule>();
            containerBuilder.RegisterModule<StorageModule>();

            _container = containerBuilder.Build();
        }

        [TearDown]
        public void Teardown()
        {
            _container.Dispose();

            TestUtils.DeleteTestChainData();
        }

        [Test]
        public void Test_VirtualMachine_InvokeContract()
        {
            var stateManager = _container.Resolve<IStateManager>();

            var hash = UInt160Utils.Zero;
            var contract = new Contract
            (
                hash,
                ""
                    .HexToBytes()
            );
            if (!VirtualMachine.VerifyContract(contract.ByteCode))
                throw new Exception("Unable to validate smart-contract code");

            var snapshot = stateManager.NewSnapshot();
            snapshot.Contracts.AddContract(UInt160Utils.Zero, contract);
            stateManager.Approve();

            Console.WriteLine("Contract Hash: " + hash.ToHex());

            for (var i = 0; i < 1; ++i)
            {
                var currentTime = TimeUtils.CurrentTimeMillis();
                var currentSnapshot = stateManager.NewSnapshot();

                var sender = "0x6bc32575acb8754886dc283c2c8ac54b1bd93195".HexToBytes().ToUInt160();
                var to = "0xfd893ce89186fc6861d339cb6ab5d75458e3daf3".HexToBytes().ToUInt160();

                var transactionReceipt = new TransactionReceipt();
                transactionReceipt.Transaction = new Transaction();
                transactionReceipt.Transaction.Value = 0.ToUInt256();
                var context = new InvocationContext(sender, currentSnapshot, transactionReceipt);

                {
                    /* ERC-20: name */
                    Console.WriteLine("\nERC-20: name()");
                    var input = ContractEncoder.Encode("name()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {"LAtoken"}, {status.ReturnValue!.ToHex()}");
                }

                stateManager.Approve();
            exit_mark:
                var elapsedTime = TimeUtils.CurrentTimeMillis() - currentTime;
                Console.WriteLine("Elapsed Time: " + elapsedTime + "ms");
            }
        }

        [Test]
        public void Test_VirtualMachine_InvokeERC20Contract()
        {
            var stateManager = _container.Resolve<IStateManager>();

            var hash = UInt160Utils.Zero;
            var contract = new Contract
            (
                hash,
                ""
                    .HexToBytes()
            );
            if (!VirtualMachine.VerifyContract(contract.ByteCode))
                throw new Exception("Unable to validate smart-contract code");

            var snapshot = stateManager.NewSnapshot();
            snapshot.Contracts.AddContract(UInt160Utils.Zero, contract);
            stateManager.Approve();

            Console.WriteLine("Contract Hash: " + hash.ToHex());

            for (var i = 0; i < 1; ++i)
            {
                var currentTime = TimeUtils.CurrentTimeMillis();
                var currentSnapshot = stateManager.NewSnapshot();

                var sender = "0x6bc32575acb8754886dc283c2c8ac54b1bd93195".HexToBytes().ToUInt160();
                var to = "0xfd893ce89186fc6861d339cb6ab5d75458e3daf3".HexToBytes().ToUInt160();

                var transactionReceipt = new TransactionReceipt();
                transactionReceipt.Transaction = new Transaction();
                transactionReceipt.Transaction.Value = 0.ToUInt256();
                var context = new InvocationContext(sender, currentSnapshot, transactionReceipt);

                {
                    /* ERC-20: name */
                    Console.WriteLine("\nERC-20: name()");
                    var input = ContractEncoder.Encode("name()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {"LAtoken"}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: symbol */
                    Console.WriteLine("\nERC-20: symbol()");
                    var input = ContractEncoder.Encode("symbol()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {"LA"}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: decimals */
                    Console.WriteLine("\nERC-20: decimals()");
                    var input = ContractEncoder.Encode("decimals()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {18}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: totalSupply */
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {0}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* mint */
                    Console.WriteLine($"\nERC-20: mint({sender.ToHex()},{Money.FromDecimal(100)})");
                    var input = ContractEncoder.Encode("mint(address,uint256)", sender, Money.FromDecimal(100));
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: totalSupply */
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {100}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {100}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: transfer */
                    Console.WriteLine($"\nERC-20: transfer({to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("transfer(address,uint256)", to, Money.FromDecimal(50));
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {50}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {50}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: approve */
                    Console.WriteLine($"\nERC-20: approve({to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("approve(address,uint256)", to, Money.FromDecimal(50));
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: allowance */
                    Console.WriteLine($"\nERC-20: allowance({sender.ToHex()},{to.ToHex()})");
                    var input = ContractEncoder.Encode("allowance(address,address)", sender, to);
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {50}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: increaseAllowance */
                    Console.WriteLine($"\nERC-20: increaseAllowance({to.ToHex()},{Money.FromDecimal(10)})");
                    var input = ContractEncoder.Encode("increaseAllowance(address,uint256)", to, Money.FromDecimal(10));
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: allowance */
                    Console.WriteLine($"\nERC-20: allowance({sender.ToHex()},{to.ToHex()})");
                    var input = ContractEncoder.Encode("allowance(address,address)", sender, to);
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {60}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: decreaseAllowance */
                    Console.WriteLine($"\nERC-20: decreaseAllowance({to.ToHex()},{Money.FromDecimal(10)})");
                    var input = ContractEncoder.Encode("decreaseAllowance(address,uint256)", to, Money.FromDecimal(10));
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: allowance */
                    Console.WriteLine($"\nERC-20: allowance({sender.ToHex()},{to.ToHex()})");
                    var input = ContractEncoder.Encode("allowance(address,address)", sender, to);
                    // Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {50}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: transferFrom */
                    Console.WriteLine($"\nERC-20: transferFrom({sender.ToHex()},{to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("transferFrom(address,address,uint256)", sender, to,
                        Money.FromDecimal(50));
                    // Console.WriteLine($"ABI: {input.ToHex()}");

                    // change sender
                    context = new InvocationContext(to, context.Snapshot, transactionReceipt);

                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {0}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {100}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* burn */
                    Console.WriteLine($"\nERC-20: burn({to.ToHex()},{Money.FromDecimal(30)})");
                    var input = ContractEncoder.Encode("burn(address,uint256)", to, Money.FromDecimal(30));
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {true}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: totalSupply */
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {70}, {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    // Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {70}, {status.ReturnValue!.ToHex()}");
                }

                stateManager.Approve();
            exit_mark:
                var elapsedTime = TimeUtils.CurrentTimeMillis() - currentTime;
                Console.WriteLine("Elapsed Time: " + elapsedTime + "ms");
            }
        }
    }
}