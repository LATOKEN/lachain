using System;
using System.IO;
using System.Reflection;
using Lachain.Core.Blockchain.VM;
using Lachain.Core.CLI;
using Lachain.Core.Config;
using Lachain.Core.DI;
using Lachain.Core.DI.Modules;
using Lachain.Core.DI.SimpleInjector;
using Lachain.Proto;
using Lachain.Storage.State;
using Lachain.Utility;
using Lachain.Utility.Utils;
using Lachain.UtilityTest;
using NUnit.Framework;

namespace Lachain.CoreTest.IntegrationTests
{
    public class VirtualMachineTest
    {
        private IContainer _container;

        [SetUp]
        public void Setup()
        {
            TestUtils.DeleteTestChainData();

            var containerBuilder = new SimpleInjectorContainerBuilder(new ConfigManager(
                Path.Join(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "config.json"),
                new RunOptions()
            ));

            containerBuilder.RegisterModule<BlockchainModule>();
            containerBuilder.RegisterModule<ConfigModule>();
            containerBuilder.RegisterModule<StorageModule>();

            _container = containerBuilder.Build();
        }

        [TearDown]
        public void Teardown()
        {
            _container.Dispose();

            TestUtils.DeleteTestChainData();
        }

        [Test]
        public void Test_VirtualMachine_InvokeContract()
        {
            var stateManager = _container.Resolve<IStateManager>();
            
            var tx = new TransactionReceipt();
            tx.Transaction = new Transaction();
            tx.Transaction.Value = Money.Parse("0.0").ToUInt256();
            
            var sender = "0x6bc32575acb8754886dc283c2c8ac54b1bd93195".HexToBytes().ToUInt160();
            var input = "0xcde4efa9".HexToBytes();
            
            var byteCode =

                    .HexToBytes();
            var contract = new Contract(UInt160Utils.Zero, byteCode);
            var status = VirtualMachine.InvokeWasmContract(contract, new InvocationContext(sender, stateManager.LastApprovedSnapshot, tx), input, 100_000_000);
            Console.WriteLine("Contract executed with status: " + status.Status);
        }
    }
}