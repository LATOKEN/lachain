using System;
using System.IO;
using System.Reflection;
using Lachain.Core.Blockchain.VM;
using Lachain.Core.CLI;
using Lachain.Core.Config;
using Lachain.Core.DI;
using Lachain.Core.DI.Modules;
using Lachain.Core.DI.SimpleInjector;
using Lachain.Proto;
using Lachain.Storage.State;
using Lachain.Utility;
using Lachain.Utility.Utils;
using Lachain.UtilityTest;
using NUnit.Framework;

namespace Lachain.CoreTest.IntegrationTests
{
    public class VirtualMachineTest
    {
        private IContainer _container;

        [SetUp]
        public void Setup()
        {
            TestUtils.DeleteTestChainData();

            var containerBuilder = new SimpleInjectorContainerBuilder(new ConfigManager(
                Path.Join(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "config.json"),
                new RunOptions()
            ));

            containerBuilder.RegisterModule<BlockchainModule>();
            containerBuilder.RegisterModule<ConfigModule>();
            containerBuilder.RegisterModule<StorageModule>();

            _container = containerBuilder.Build();
        }

        [TearDown]
        public void Teardown()
        {
            _container.Dispose();

            TestUtils.DeleteTestChainData();
        }

        [Test]
        public void Test_VirtualMachine_InvokeContract()
        {
            var stateManager = _container.Resolve<IStateManager>();

            var hash = UInt160Utils.Zero;
            var contract = new Contract
            (
                hash,

                    .HexToBytes()
            );
            if (!VirtualMachine.VerifyContract(contract.ByteCode))
                throw new Exception("Unable to validate smart-contract code");

            var snapshot = stateManager.NewSnapshot();
            snapshot.Contracts.AddContract(UInt160Utils.Zero, contract);
            stateManager.Approve();

            Console.WriteLine("Contract Hash: " + hash.ToHex());

            for (var i = 0; i < 1; ++i)
            {
                var currentTime = TimeUtils.CurrentTimeMillis();
                var currentSnapshot = stateManager.NewSnapshot();

                var sender = "0x6bc32575acb8754886dc283c2c8ac54b1bd93195".HexToBytes().ToUInt160();
                var to = "0xfd893ce89186fc6861d339cb6ab5d75458e3daf3".HexToBytes().ToUInt160();

                /* give to sender 1 token */
                var valueToTransfer = Money.Wei;
                stateManager.CurrentSnapshot.Storage.SetValue(contract.ContractAddress, sender.ToUInt256(),
                    (valueToTransfer * 3).ToUInt256());

                var transactionReceipt = new TransactionReceipt();
                transactionReceipt.Transaction = new Transaction();
                transactionReceipt.Transaction.Value = 0.ToUInt256();
                var context = new InvocationContext(sender, currentSnapshot, transactionReceipt);

                {
                    /* ERC-20: totalSupply (0x18160ddd) */
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* mint */
                    Console.WriteLine($"\nERC-20: mint({sender.ToHex()},{Money.FromDecimal(100)})");
                    var input = ContractEncoder.Encode("mint(address,uint256)", sender, Money.FromDecimal(100));
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: totalSupply (0x18160ddd) */
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: transfer */
                    Console.WriteLine($"\nERC-20: transfer({to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("transfer(address,uint256)", to, Money.FromDecimal(50));
                    Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: approve */
                    Console.WriteLine($"\nERC-20: approve({to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("approve(address,uint256)", to, Money.FromDecimal(50));
                    Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: transferFrom */
                    Console.WriteLine($"\nERC-20: transferFrom({to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("transferFrom(address,address,uint256)", sender, to,
                        Money.FromDecimal(50));
                    Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }

                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = VirtualMachine.InvokeWasmContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status.Status);
                        Console.WriteLine($"Result: {status.ReturnValue?.ToHex()}");
                        goto exit_mark;
                    }

                    Console.WriteLine($"Result: {status.ReturnValue!.ToHex()}");
                }

                stateManager.Approve();
            exit_mark:
                var elapsedTime = TimeUtils.CurrentTimeMillis() - currentTime;
                Console.WriteLine("Elapsed Time: " + elapsedTime + "ms");
            }
        }
    }
}