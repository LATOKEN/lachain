using System.Collections.Generic;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using NeoSharp.BinarySerialization;
using NeoSharp.Core.Blockchain.Repositories;
using NeoSharp.Core.Models;
using NeoSharp.Core.Models.OperationManger;
using NeoSharp.Core.SmartContract;
using NeoSharp.Core.Types;
using NeoSharp.Cryptography;
using NeoSharp.Types;
using NeoSharp.Types.ExtensionMethods;

namespace NeoSharp.Core.Test.Serializers
{
    [TestClass]
    public class UtBinarySerializerRaw
    {
        private IBinarySerializer _serializer;

        [TestInitialize]
        public void WarmUpSerializer()
        {
            _serializer = new BinarySerializer(typeof(BlockHeader).Assembly, typeof(UtBinarySerializer).Assembly, typeof(Fixed8).Assembly);
        }

        [TestMethod]
        public void SerializeDeserialize_HeaderPayload()
        {
            var dic = new Dictionary<string, string>()
            {
                { "0xd782db8a38b0eea0d7394e0f007c61c71798867578c77c387c08113903946cc9","0x00000000bf4421c88776c53b43ce1dc45463bfd2028e322fdfb60064be150ed3e36125d418f98ec3ed2c2d1c9427385e7b85d0d1a366e29c4e399693a59718380f8bbad6d6d90358010000004490d0bb7170726c59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501404edf5005771de04619235d5a4c7a9a11bb78e008541f1da7725f654c33380a3c87e2959a025da706d7255cb3a3fa07ebe9c6559d0d9e6213c68049168eb1056f4038a338f879930c8adc168983f60aae6f8542365d844f004976346b70fb0dd31aa1dbd4abd81e4a4aeef9941ecd4e2dd2c1a5b05e1cc74454d0403edaee6d7a4d4099d33c0b889bf6f3e6d87ab1b11140282e9a3265b0b9b918d6020b2c62d5a040c7e0c2c7c1dae3af9b19b178c71552ebd0b596e401c175067c70ea75717c8c00404e0ebd369e81093866fe29406dbf6b402c003774541799d08bf9bb0fc6070ec0f6bad908ab95f05fa64e682b485800b3c12102a8596e6c715ec76f4564d5eff34070e0521979fcd2cbbfa1456d97cc18d9b4a6ad87a97a2a0bcdedbf71b6c9676c645886056821b6f3fec8694894c66f41b762bc4e29e46ad15aee47f05d27d822f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0xbf638e92c85016df9bc3b62b33f3879fa22d49d5f55d822b423149a3bca9e574","0x00000000c96c94033911087c387cc77875869817c7617c000f4e39d7a0eeb0388adb82d74208df9542f56a42fb2764142d13274c951087c609565fd5c4ab9b57a183a1afead9035802000000b66fa838e89c9ab259e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140e8a85159d8655c7b5a66429831eb15dabefc0f27a22bef67febb9eccb6859cc4c5c6ae675175a0bbefeeeeff2a8e9f175aaaae0796f3b5f29cb93b5b50fbf270409270a02cbbcb99969d6dc8a85708d5609dc1bba9569c849b53db7896c7f1ffd3adc789c0fe8400fb665478567448b4c4bd9c1657432591e4de83df10348f865a40724a9cf9d43eda558bfa8755e7bd1c0e9282f96164f4ff0b7369fd80e878cf49f2e61ed0fdf8cf218e7fdd471be5f29ef1242c39f3695d5decb169667fe0d3d140860da333249f7c54db09b548ad5d5e45fb8787238d51b35a6d4759f7990f47f00ff102e7b88f45acce423dd9f4b87dbf85e7e2c5c7a6aace11e62267c0bbe16b4028d272a701c22c5f8aa3495fa22d7d5a583518ef552e73813ee369c6d51ad2f246a24eb0092ebe7e1550d7de2ee09abad4dae4f4c0277317f5b1190041b9c2c2f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x1fca8800f1ffbc9fb08bcfee1269461161d58dcee0252cf4db13220ba8189c5d","0x0000000074e5a9bca34931422b825df5d5492da29f87f3332bb6c39bdf1650c8928e63bfe8c4f58ec6f8f70e57062c8d66119d5cb3eb1b3c25228a50c10a01777e49c770fad9035803000000bd677b7cea266ca159e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501406d0c3a5611e585fad238394bba31fff6349b9aeda1a8d0bc6188a533f8a02677459df77e5b30f05e3366d1bb33b7327346fb55d65c2d0dc433700da4a50818594040b79f0163681e585b1e221bc2af63f475df6dfc353b2a9986baf72092aa8e36b38ece114b51d0f8a0af4c4845ab321ef68f1e83e416f9a442317b988d591ee2403802a4f519cb377e35222e8524373c0f99752add8919a7d0ea8b8311a547f06eee17d9db5b296a67eafbaca9f4f8a07bce533ec2c78e58cfb6d37eb404695c0340f347656e54ee0f75e6399c2799c20abd23e9498f96005bdc32ba0382bd153e3e650192214328d2894bfe57788869cccddb5ef64bebdb97c7643199aa03bcb2694063d89f940bd13dfcfb0f914f269bce280de2ba9ab4ce171c03809630511ff5758fc0fb1e64b8b7714fb19d5c00cba5c2e3adb505f3ccaacc6b8235877c6b1410f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0xbde9267017e354b9b9f7d46ffb99db1d6464812838f509ea9ed0085636d220a6","0x000000005d9c18a80b2213dbf42c25e0ce8dd56111466912eecf8bb09fbcfff10088ca1f11651fd78a37803859f28052f526612388743bd5e828c35b003c0f34ade6eaaf11da03580400000020ec5ce3c9acff3459e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140fb530ef6636e910bc48c0ba644a530da3f04701d36596d3f78966edde0e484fe3851e933e60c052da25231bf3defa1553f2923bec56605b30991c6f9981acfe540523f80526907c78a930c2bdf643b2017716903bc6b77321e6a1467c9eebfcf6a7e283a49b67e59027de612d2a06fd102b1d14124b4f9df4f7dd664d960bb752340b9415cd248395f707e75bae6ae0d1dd53ac3f2218fe59f71410aa1f327387bdc2de93e6ca3be0888b98c6d82a38c16ab58bf62c3f8fc0028403af3f6ebde07ef40e0cf7e32b6557b4b161778bb9700f479d7e83923f0aa41f13e81b977e40b404599c356368300f49a5b9f2627ec082a245d850617769d67b51a02b171c626221940eb1b5f9cee0e9bd0eaadfe199e9801b9a6ed01fa73e3fc9488dd85e3eeeabdb66c37a2fe868b8ad65329e59827067b02860b5dc115e49d53f8a6377a0e8f0cd0f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0xff8fe95efc5d1cc3a22b17503aecaf289cef68f94b79ddad6f613569ca2342d8","0x00000000a620d2365608d09eea09f538288164641ddb99fb6fd4f7b9b954e3177026e9bd34e7d606220a59c5ea3362beb7782eecc9e660783b903159102b8238d82f5f3e24da0358050000004d2042f03bdef36b59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014050021bd2ac3a243016d5a633c82a3d63a0d3960f0fe08892fc890f5541bc56dc5001c0409a911bb3198c4de3c30cc198383ccbef4a08c0f59f23cf8569c7e1544033cffaf1178456bf6af140f854b65180413c4daf0d1ba7d3370b40c30f7900fb3c11a17136939c6dd7e117d9ebc0f022503b744fa2de36475456ce330b77ada14044ec2c44e04e0a618d64f7ecdaf9f45acc369010e4ffd411145b7f7a1cf24845d07a57f8711a95941188565a4258bd5cdfa714bbaa008bbf01e1347c84f4bfcc40115060363d8f2c97ab2d09912382327b4f2c35c5f203a57a4c0681cbabe5ccd1e7f3120ab2f34dcf12e9da180a2561c306325055a66d33b6c4e698108298816b400081cd7905e961bcc63715f605203f3492a9d41fa7fedc158fdba583d45a7a40f947c82bfab7bf5b6eb3b9800cc55a82cc54b753c32383bcb282512e0ec598e0f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0xf07994eaad487e039840a565c844b5f5293f45abf15ffb9e78b462cbdc3b4548","0x00000000d84223ca6935616faddd794bf968ef9c28afec3a50172ba2c31c5dfc5ee98fff1d1039bca1e525456fcd37250a4451caffe1cd0129219b3a5ac8bb81efd003f436da0358060000006c86a0a09188467559e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140b8e51431b4f94902f12dff9a787daff481785054517a933feb8f3cd04049c11b02e800f2847e4f213ea0d60d17048bf8a277fead5a283f687e9342dcab971dec407c5eefe9d4ac3ae9644690d98ef3e87040c761062b5b7f1d41f6f603b95efda50f6c5b0d1d2ea1921e4fc13c86b9ec78e945162d97433ba543548c5cbae3c06340015c2d556494a39de8ac360b417fd6a82de3ccdb8d919efb99b34ae091529b1a6d7ec9db4513229ef337b4c89e05bbc853e30c5c93181917b8001a2dbd13221d40dbe481b61eaf3b7c682e0fba0cb38a3144ed8079a438b96d0669760c7cadf7ead96b728bd59ce6087b97a27d3b1f3706f169dae0da9595c007bb30933e607480403d152638f24fe78feeb948bb0f57cfcbc5f2b33b63211c8da96b84d7fb2cfd3dfef59ea65505ed1d00ecb30586693917a1ef6736eb0895d5664b0937f9043cf5f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x1b327ce183d004e6e898630a1ebcf29fff2029e6b6dad77a8660be960380f85d","0x0000000048453bdccb62b4789efb5ff1ab453f29f5b544c865a54098037e48adea9479f022f6ca91b0ddd2689546cab8a5e261f1d62779b85805d463bacd115ed1822bc740da0358070000008d5110eea0375a8859e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501404771818a313fa0d71bcba8e8004d21b2bed83eb4d1349cd00bb1eba283d55efb0041f1debeec04cb1bb6ff0fc98fdf06d2f17937c4f132dad3d43cfab7e3bdd74032eb2bba680805265e03c177833fa38d4b11854c3e1fe760928672610f2a1f56032770c0378c73b9d8b916e6376567c875045dc4ccfcd19ac1dca5d3d35faa4d40ac2036f91d4ccf03a558bdf06b5438a905d85ad73f810934ee2f50d1db7f235cc6245cb0d008a5bde7927b1afa506d729c02fcbbb42fbc9218ca17dafb44e67d40bdc44383bf76223d86d4214130f567ef6a04602b64c653f0822f806225c1d7f19c6940533eb1c7ed7ec278d9f3660eddfe14a59bd022e7063324f62465233ee840934de0e495b732304ed0ca882aa6dd7dd8f1bf44e3551940b1c58a8947a439d1e5e6ec5c0278e3b74396cd9f7ce109744578da56dee7e023b6f373ab6ea4a1bef1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x59cc31bb51354c9eb251545bb39dfb35b0d31b713bafa725faf3546d8e9085f5","0x000000005df8800396be60867ad7dab6e62920ff9ff2bc1e0a6398e8e604d083e17c321b9f1f92f7a54af183a659e367adb9d4b5c13de3d05f4a1ec5ce0fe593c9653aa85dda03580800000038aa1c3b0da249f359e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140489a0348e1ebbf7a5a6d98bbf30c8230d775b243c1393d0a2b0d52548cdcb419368de7528eef8944636c22024ce2890c68a875558f04c2a1ff47d58d3e1432f040e1c6abf06213de3845053446fb7fde9f51864005ea656e660df6f9474ac31f2495972d83cbaccfd121eb3b0d2add8e823de7b7861533aca56015d4066f997b2940877fe217712bdee85a840cb2af8861c454f93bc9cade0b1c41945f404d1e49567df9311ec8a95a672f85978c619b3721bfcc47c2d21e35d2f4f9ada0d68863ca40fc4b594708125e6d0432d31d6d8fad58e98866d60da703425325e222b3afa1dbca05cb07c8b74b43e45fbcffd9ca882254457d2a0bea4042b7fc0fe44155720940811a1db4f31a81391df766269efc37bae9985fad60fdc19076b74b3af537482eb1f70d2bda374ba01d309f8e3196818680cc9422a14f8f24ca56a26b399d058df1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x005fb74a6de169ce5daf59a114405e5b27238b2489690e3b2a60c14ddfc3b326","0x00000000f585908e6d54f3fa25a7af3b711bd3b035fb9db35b5451b29e4c3551bb31cc5981e6af87f11e9627007155052a71f9373d0d59541b0edca950b76c0f790e4e2c6fda0358090000002d9bcce3d108499959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140af4a0e7fb97e3e14355ce002dab4e5be93b33a2ed4ef7af8154f6c241cfabd6cba103e83a85060ab7094afbb21d6627bd70612a7c03ef2bd0447d3cc0e94e20740fa9f77ee0adfeb344301b95b4b114120e164accd348497ecb8f84c52bda18c0a868daebc07c250876a7281891bc3a6d45e6ee584394268faa8290d980fedabc7406b2dca93b7e7c692009514ad56fed21b17f33018c9791c0fdea842094d0973ca0030aa803bbfbeae0602f55c0711a2b0e0076714b6d37476fb7a407c8cf7fe01409af9ccacfc3028426f68a453b0f7f213a01a2a161dc3fcc2b7f72c96b1bec6f08e02ec39c91407e3a799f79491c11b7f9ed879dff8b8ba61be9bc4a5d502dbfd409479bfd4b74320f72e525a3a67daba0354f6334800cfbc778908f89de5c87c388c7953a7d7837358a208b4417b67eb4cd37b9693acf7fbcaafae23c63333ebf5f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0xf3c4ec44c07eccbda974f1ee34bc6654ab6d3f22cd89c2e5c593a16d6cc7e6e8","0x0000000026b3c3df4dc1602a3b0e6989248b23275b5e4014a159af5dce69e16d4ab75f00f439321a51f425a530820cfe4d715bfd835b49687e87772f2c4737b8bc586dca7fda03580a000000bf14ff160228f0c059e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014036fdd23248880c1c311bcd97df04fe6d740dc1bf340c26915f0466e31e81c039012eca7a760270389e04b58b99820fe49cf8c24c9afc65d696b4d3f406a1e6b5405172a9b461e68dd399c8716de11d31f7dd2ec3be327c636b024562db6ac5df1cffdbee74c994736fd49803234d2baffbc0054f28ba5ec76494a467b4106955bb4084af7746d269241628c667003e9d39288b190ad5cef218ada625cbba8be411bb153828d8d3634e8f586638e2448425bc5b671be69800392ccbdebc945a5099c7406f6a11824105ecad345e525957053e77fbc0119d6b3fa7f854527e816cfce0d95dac66888e07e8990c95103d8e46124aac16f152e088520d7ec8325e3a2456f840e5b77ef0e3c410b347ccaf8a87516d10b88d436563c80712153273993afc320ec49b638225f58de464a1345e62a564b398939f96f6f4b7cf21b583609f85495af1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x7dafa40cda65fc0a101509e76ef5c697f72153eb09e9258bfc034c51f0b8178a","0x00000000e8e6c76c6da193c5e5c289cd223f6dab5466bc34eef174a9bdcc7ec044ecc4f32ad68bb5870a364cc6d5f75961bc271da07e5528e74a9b436d0deb83fa596e2595da03580b000000a004d8ac474836a959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014037001fde08add2d5ce699124d741678923bbcda1d25ffe5bbbd58296423ca411946784783dcc0519a51358d6628d32161c026bf7fa37edb2f25bc97bcb946254408ada0609f3dafd29cc95221aa8bd4807aab29575c31988a1bc288fd7a2dab70fedee9049b8bf37c646fac9a2d328f8c6476bc53e4d4ad3ff7f1f41a4d544e723400fc2ea4735252c6b69726367f4f1e2a9085d2e423467cfd975573b8c5ed8dc4ab79a1d313af22f8a2fbbf0a58004046053a08c24b6dc888c67da8873bc4a9a1e407e46b0159ef716a3263fc5d4b88a8bf0e6a0a230a2c86783554f984319f90b2d78e1adc966f63dc921eb7c8514d3645993048f83b7526e5762aa60b80c2aa9d1402bf9816b2c9417652e809c31fc022fcc0ddb56caf1ab2077b9239af95d49d888f10f0f854325775e3fdea81ff2354536f8d1f8f2f9c9ec8d156ed7e2d79ba987f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x4ce9cf8885fa0807522df98dac625c220c474d2b21f738142b311517ae4d5d0e","0x000000008a17b8f0514c03fc8b25e909eb5321f797c6f56ee70915100afc65da0ca4af7dac5528800ada5d34edbb9c1400890ea565bef805bf12642c92cac3e858ee6619a6da03580c0000003ee066a190cca03259e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501405bb1328a81b576de270fd3de101142d688c8a30f5f405dce3a73400e4e67a67a9fe7bca4b65ddd155530471931a2728a0ed35e4aaa66e278ed872124e9d428684034d7441a1d45ebdb980f9e07558e0487fa98d6304d140a02f72e2e43f2e94ab4d835386f37d804f96bab4cc798f10caa6b3a2fd37fc2056e66fefc9e7ef9d19940a17a1bbaa0601764b2b20a29214b109628cd671c7929b0da4ace3b93f14ffd929af8a098e5d4682a7af553570a969c966393217bde116f39c8d9240d37f96b804090dd907fcf898c7a9747732fa96f4830d702ca0e859130b1a59713c03cc6d1bdd72614f1ac233cc94930421958e2f8bc8fafa3997f87de2a493bf51136f29cfa4085450006c5095c125b16be9ac0486f828a0a35a9c76d168397ac60512b63032d6393e15a066a0460d67a8e5196384fe485f4c33f6ea74f9d1fb2a2b7b8a03b03f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x5e04f6768ccaf58f0877b9218897af9990451ec2217a74d75d6aaab874b2641c","0x000000000e5d4dae1715312b1438f7212b4d470c225c62ac8df92d520708fa8588cfe94c34154cc554d14aa6c7b34084a0383b17d5a8b576e7daebfbf22b8cd67ae3e441b8da03580d0000006ec219122e764fff59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501402eed4674328a87b571be20bc43cc2bb4f1eb3620bbf4df63383ad72474e61a73e7a27e88675cab5535f2dbda1af8096612cb76b3960f06b653b09de5c8a7b12040bd7d14001457193b38cfabb1eedf5191601b756cb35e05a72ecba858b926934dfb1568ef2ede18a2ed34e1295480a4df418793b4df2f6449938370a4bc7d0fd540cf4f1d915d61d6cb9aad49a84f4a294e5ece50add25a1d3259ddfa80973a6420008ab75c477671a926472bdee3c18f07f78b61024f9bed6453b00fa2635b2f18403d3c526351a38392aa34915a81a68d60738073365ed282e2db12fb97a1b966a8af8ec6fef217785657b4d11cba8b38f50f3f99b4fbe440319573448cfed1e62840f62b12ead9260aaa7987be35640b3d9fcc8ba7134dfea9d697fd788c8f948741a2e05abecb79ce0cc223f31c0a3cdccc577034b9d50f024a13325e3cf75c6515f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x31cc8133675ecf4454c92ac0ab55e7c0e3d517c73851017aa54e9b885e7f890c","0x000000001c64b274b8aa6a5dd7747a21c21e459099af978821b977088ff5ca8c76f6045eaa2c5cbe413097253720582b11078e7b299bf087cdb4e8c081104a0b42dccbdec3da03580e0000007e8966108cadad9a59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014063ae52cc68a5dc3ee99afd078644fb51c3da4d0c36927c6f8f0cf1e0a5596baf23e652fc490ee76a52fa850cfef5677c0749e3c3ff4a3106276dfadb22504e5740ee6bb71cf94a767fa4c4980329b201a3d08a64832eed7ebb19c2fb7b60d405db78add55840f45558ed7fbd283ed046c403c4db25770219d34f0604115108cfc840e9f779a4c2f897022d8d3afdb0cba97a6935828a20a2028ffa456192abfd2fcd778f6488c187323f48091dd2e532a788a8f17d0f87436289d60fbb41e9a66541406a3da2f7d3a1e4aaa8c157adaecbb50f55987c23cbaf8e35bc00e4d385754d52076de84e782ebb7685aeb7c9b1cf7f7af302393df3f2d194ed1af57331994e2e400967c119860e337e9ceb2e9011c8cf8fc0609efe0c79c6b46d70e4c43e58447bfa9e7cdb2809567bb8cc3486d2b01d043491c8e1b26c78c878d63ed8c07510acf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0xa46f58a882a04482f7d93f4c8821c78072329fae383df8103bdb8e5d129f1b72","0x000000000c897f5e889b4ea57a015138c717d5e3c0e755abc02ac95444cf5e673381cc3170cb79ef212dc7597904f12d1a0bef94c0d61ca33464c4252f69d6baabe6e658e0da03580f000000776777a37bb3c40b59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140b18e81e5e5c9c353bb0b5733e8d080b77d56980b3e4dce51f439848dd258da4b54dc9e5742fefd13b420d4dc96dead66aaee22190a09fb0a152ed0d61813351f4068b480154d6acad4506a1d80d9d0b5392a5bcba1fdf7891e8265f8d7dc4d08ccde11de771f9b572af0faedd7eb5e72dc12fca28986d793b2806d0d801d3d9e05407131e55fbfcc870fe5d10bc4c7a948868dbc28c07988471437f84ebb0b255d7c7ed800038a4e16bb1a365115f13863f82cfbac52ea86cdefdb3bc095f64875fb40259aa8f4a0805a2aabccfae6424e7552b8c5c8245e274a911dd3a45883564b8ca862c10d22bbf53eed87d627e9544efb678916240420dd3d50afd3852d3e655940137c3a365f8564f253312cd7f7bb3fc79017e2abd7d82de205c8c6d4c5626ea56affee311397094c7b601a6a0245d28458b11ff966218d3a24a7a904c7bbfa33f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x7fd7fa21193c3aaaf5ff3c810963d90b3920242dede88beac15271520d1d7340","0x00000000721b9f125d8edb3b10f83d38ae9f327280c721884c3fd9f78244a082a8586fa4cf4b654d867a06b05c7ae74600696ead1e7c1922338a9d8b8f59f0c5f9d6c3b5f3da035810000000a4a53cb48311e21859e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014015d026c09e428f053fc1a44457c415bd59c6948dda31eb6116724d2e5750e2a06f8f635df436787aae0c5b2a20a9b02be5db9870cd2c98a26fc7f7b82f9b34cf404154f79182c31780cabf03c8d835efae833a3f641ea3110f40ad778c6d907558f9e74a92639e8b7986da2e5b05d1bd32f55a3b403a3d421ed4af5e67c59e1960400c53445af2a96dc4c9b28e42e8f8325b7af4fcf3c6428afe9b1493e6a284e31c218584cb37ac24c12db961512fab6a6e9a5301f08e9b1e8ed1ac683ea52efcb040ff07c5f7adc0e33d55ab53497a25c3694114cd01ca0624aa8a66e6999dc3ce1e88c80bd98a5535667d8c7018a64a25f07d14feaaaf3b4681e3909266fc68bb6b40c30ffe2b95030b87043d05fde2fb919a0c4fedf648d3fa6de7e4fd0e66b3e4060860a811834476dc84ad2f83bdb7e138b392c0af5a76fa1c460e0b99672e8ed5f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x52d46d562f1828938effcfc7f9d3602f1519d9e26c4bd123db76bc00021c6f8b","0x0000000040731d0d527152c1ea8be8ed2d2420390bd96309813cfff5aa3a3c1921fad77fb570ba944a34ba9ffde0d189b91a194283f52c17e2c3c4b441250b7ae82cb1fb03db0358110000003ae2deee0534f3ee59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140e09b30bf7b6c38de252a9f87d539c41a9e6a0f47cbc150a5eafc014c478dea5aa2570ee1a5958f883a307ad0e3db49aa4cb327761eedc941457dd0cdff8517e94031c359d614181b357b11cbc31eaa523ab766b04e312cc3498b00ef10afd1513f9ae38e60274a03c34ac405aa266a9c2f9420db9ed90f6392a0deca16bbea147c40dfc01786518aa6257cb179708732c0cb7467072dce94f1f78129c98d3fb7c775ea308bce0a0754e0ba7eb67e9ddea6d9a6cb1f2bdf22f4579268f6c5ac3ad708406485a5622cde9f9616f7f9be495b8219a789d9a90eaa03851b4b75947eb736eb95805b808cf5be0d467f1cdee5bf3dc0992a05dce3f4b1f03815556466f568324024d12336c9ce7566f0b8cd1759c28b162cc45682d382c9eeed031590849a972a386a16beda559b7cb109e38aa3eafb78e293731951da10e515b904cc321b8648f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x8348d71c1759652458b88e0908b20eff081098fa061e2553566175aefe0e9f55","0x000000008b6f1c0200bc76db23d14b6ce2d919152f60d3f9c7cfff8e9328182f566dd45253ab8b369c708536c1e053c2807dca38745269e82f3ab18d0ad5f4a9a38300ad18db03581200000059bf675f1bb507be59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501403f08f1172e920cdc099c474ea4d7b34321f63155e90bfc2bd4cd0e3bdf326f5b25ccf30e3843ef541eaac9a3d13ed9b16e4461ede5fcac73d540699c94b9f0974096b32f0ea9c3e0ca7029039a7eb158aea3fc19e7cc4053d676a3924608eae28f9e37f4a62dce7d91b8f5346d0e51ee76fa5316b79581b9b2ba78d5f02a669c66409cb5819c3953a809a34326146c847f3feb7a5cfc2644f69f36fe55fa592bdd5dec4dbf0432accd998016532aaa448d915d5c627a29a4ad356a1bd752e60a4b624088c6a433997a134235a87d2509e43ac66951ffc091d9282944c02141bb720fd04687b89929322a207c6c19c1bd7c88092faf4b592d9b85158fc44b23bd6888d540e8a94fc550868caaad40cf74ddaf6bd86efdb961a1cfad09bdfdf4ca76184b97a21e2e4866659bf8665175c1e874fb89fd0c32a96cd75dc852a96a0611b43736f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x6b5e1193dfff770cb75442148c8f1d85cdd90791d1664838eb2f9cdbdb0aeef0","0x00000000559f0efeae75615653251e06fa981008ff0eb208098eb858246559171cd74883a59c3ec44cc68d546eef7d1521c91a3dde0d44bf7b5813e98d25c3a59adfdeeb2adb03581300000065d336b734e9880459e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140a8c83cd2d3ed4a505dc6bd2d66e1b57ae0a0d54f91541a80876c8f9560b5dd49241d57f80076c5011a5770632c2a7c5cadc9fb2fb184076dd109038eb23f27f740a3662b2beaefe8546768125377f3145d1dfc48f417a9fd38ff758553da1fb43a8414b734573b8b0267333f022c9cec093351516a10e58ccccf669dbacecc8779409c503b0d6f0a98d6d7f4a84fc2edc85c092d099dfc728a56f438cbc381fff899f1b930686d69416a836eb3149eee18f9038d4dab44967eddbcaa15ca4065d919403b869f1c87e2cfad11d6cc35c74a6b0425cce18bd5f1b5f021cd44061cb416eac6c1a9fe282c827648b98da6577c6e447aa0802b0d164e3ea76e1de987c09592403a74e5992a4b867a24790ef0a6af42f388b1c9936c6488acf6683eaa37948ccc6452cbadc2f491a8c48984aa653fe15a6ae7d57773ba475e28fc4a2ccb474848f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
                { "0x12e255d5c551c1c80a7b3a927ab24522099856e0c6fa19bc24f98066ea4d53f9","0x00000000f0ee0adbdb9c2feb384866d19107d9cd851d8f8c144254b70c77ffdf93115e6b8da8dd842a478b238d00b9833f7bd5495bc50e6c2b17faa2a616c7d1177bea4a3cdb035814000000f16e4cdb27038b8e59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140f65d54f54f45852dd684bfe1df4ddb384b239d566816aa3d788c7a856f4834ce2b34e7a97cfe22cce6db6876a9d3103c4f28861fc9cba0b002298c8d5706276640aa3bc5e3e70b336b079aa463a75d880a2f8020a12695f574c15f0849ee1cbdc862afa418ec95833c1ed38258cf37657505b24a2a24b3cf284aab76f6273424c24005108c623e83ff63f6cd006debfd84cdf1c63a83c985e844a7eeffe2b26010cd58a91665f74dc9ab22e59ec571f74f3f6960f11e08df3abf2fa0f067a39239e740289fa6502b69e63d5d8610cacd5e1833aeafd9198b379b86252eee65a4f775b2df17bf44be7bbe3a14cdf49d653db5877d804504d94e243e2350ac6295be127340a79f80f8c0209e0b4245a2ca3b9af5a27886081c46dce259b535b4a17203301de4b755781b12479d0bb0e059c247955aabc5b9c9644845162507f76451cf1748f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae00" },
            };

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var blockHeaderOperationsManager = new BlockHeaderOperationsManager(Crypto.Default, BinarySerializer.Default, witnessOperationsManager);

            foreach (var key in dic)
            {
                BlockHeader header;

                using (var stream = new MemoryStream(key.Value.HexToBytes()))
                {
                    header = _serializer.Deserialize<BlockHeader>(stream);

                    Assert.AreEqual(stream.Position, stream.Length);
                }

                blockHeaderOperationsManager.Sign(header);

                Assert.AreEqual(key.Key, header.Hash.ToString(true));
                Assert.AreEqual(key.Value, _serializer.Serialize(header).ToHexString(true));
            }
        }

        [TestMethod]
        public void SerializeDeserialize_Block()
        {
            // MainNet - Block 1

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());
            var blockSigner = new BlockOperationManager(Crypto.Default, BinarySerializer.Default, transactionOperationsManager, witnessOperationsManager, new Mock<IBlockRepository>().Object);
            var blockHeaderOperationsManager = new BlockHeaderOperationsManager(Crypto.Default, BinarySerializer.Default, witnessOperationsManager);

            var data = "00000000bf4421c88776c53b43ce1dc45463bfd2028e322fdfb60064be150ed3e36125d418f98ec3ed2c2d1c9427385e7b85d0d1a366e29c4e399693a59718380f8bbad6d6d90358010000004490d0bb7170726c59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501404edf5005771de04619235d5a4c7a9a11bb78e008541f1da7725f654c33380a3c87e2959a025da706d7255cb3a3fa07ebe9c6559d0d9e6213c68049168eb1056f4038a338f879930c8adc168983f60aae6f8542365d844f004976346b70fb0dd31aa1dbd4abd81e4a4aeef9941ecd4e2dd2c1a5b05e1cc74454d0403edaee6d7a4d4099d33c0b889bf6f3e6d87ab1b11140282e9a3265b0b9b918d6020b2c62d5a040c7e0c2c7c1dae3af9b19b178c71552ebd0b596e401c175067c70ea75717c8c00404e0ebd369e81093866fe29406dbf6b402c003774541799d08bf9bb0fc6070ec0f6bad908ab95f05fa64e682b485800b3c12102a8596e6c715ec76f4564d5eff34070e0521979fcd2cbbfa1456d97cc18d9b4a6ad87a97a2a0bcdedbf71b6c9676c645886056821b6f3fec8694894c66f41b762bc4e29e46ad15aee47f05d27d822f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100004490d0bb00000000".HexToBytes();
            var block = _serializer.Deserialize<Block>(data);

            Assert.AreEqual(block.Version, 0U);
            Assert.AreEqual(block.PreviousBlockHash.ToString(true), "0xd42561e3d30e15be6400b6df2f328e02d2bf6354c41dce433bc57687c82144bf");
            Assert.AreEqual(block.MerkleRoot.ToString(true), "0xd6ba8b0f381897a59396394e9ce266a3d1d0857b5e3827941c2d2cedc38ef918");
            Assert.AreEqual(block.Timestamp, 1476647382U);
            Assert.AreEqual(block.Index, 1U);
            Assert.AreEqual(block.ConsensusData, 7814431937225855044UL);
            Assert.AreEqual(block.NextConsensus.ToString(true), "0x55bfa4cc95efe9bb65c104bf27385d2b655de759");

            blockSigner.Sign(block);

            Assert.AreEqual(block.Witness.InvocationScript.ToHexString(true), "0x404edf5005771de04619235d5a4c7a9a11bb78e008541f1da7725f654c33380a3c87e2959a025da706d7255cb3a3fa07ebe9c6559d0d9e6213c68049168eb1056f4038a338f879930c8adc168983f60aae6f8542365d844f004976346b70fb0dd31aa1dbd4abd81e4a4aeef9941ecd4e2dd2c1a5b05e1cc74454d0403edaee6d7a4d4099d33c0b889bf6f3e6d87ab1b11140282e9a3265b0b9b918d6020b2c62d5a040c7e0c2c7c1dae3af9b19b178c71552ebd0b596e401c175067c70ea75717c8c00404e0ebd369e81093866fe29406dbf6b402c003774541799d08bf9bb0fc6070ec0f6bad908ab95f05fa64e682b485800b3c12102a8596e6c715ec76f4564d5eff34070e0521979fcd2cbbfa1456d97cc18d9b4a6ad87a97a2a0bcdedbf71b6c9676c645886056821b6f3fec8694894c66f41b762bc4e29e46ad15aee47f05d27d822");
            Assert.AreEqual(block.Witness.VerificationScript.ToHexString(true), "0x552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae");
            Assert.AreEqual(block.Witness.Hash.ToString(true), "0x55bfa4cc95efe9bb65c104bf27385d2b655de759");

            Assert.AreEqual(block.Hash.ToString(true), "0xd782db8a38b0eea0d7394e0f007c61c71798867578c77c387c08113903946cc9");

            Assert.AreEqual(block.Transactions.Length, 1);

            var tx = block.Transactions[0] as MinerTransaction;

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0xd6ba8b0f381897a59396394e9ce266a3d1d0857b5e3827941c2d2cedc38ef918");
            Assert.AreEqual(tx.Nonce, 3151007812);
            Assert.AreEqual(tx.Attributes.Length, 0);
            Assert.AreEqual(tx.Inputs.Length, 0);
            Assert.AreEqual(tx.Outputs.Length, 0);

            CollectionAssert.AreEqual(data, _serializer.Serialize(block));

            var headerTrim = block.Trim();
            var headerNotTrim = block.GetBlockHeader();

            blockHeaderOperationsManager.Sign(headerTrim);
            Assert.AreEqual(block.Hash, headerTrim.Hash);

            blockHeaderOperationsManager.Sign(headerNotTrim);
            Assert.AreEqual(block.Hash, headerNotTrim.Hash);
        }

        [TestMethod]
        public void SerializeDeserialize_ClaimTransaction()
        {
            // Mainnet Block=4275 / Tx=1

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "020001fda149910702cc19ed967c32f883a322f2e1713790c1398f538a42e489d485ee0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60c074110000000000f41cdd4b7ec41847443fa36bf8dde0009d7ecebc01414019fcb645e67b870a657fe028bcb057f866347d211dc26a25fe0570250f41d0c881113e1820ac55a029e6fc5acab80587f9bebf8b84dbd4503ba816c417b8bf522321039f07df7861c216de3b78c647b77f8b01404b400a437302b651cdf206ec1af626ac".HexToBytes();
            var tx = (ClaimTransaction)_serializer.Deserialize<Transaction>(data);

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0x462c0e6fcd68853dd44f4055e2aa759548038d3b1362b6182398a6d44c0d1bf0");
            Assert.AreEqual(tx.Attributes.Length, 0);

            Assert.AreEqual(tx.Claims.Length, 1);
            Assert.AreEqual(tx.Claims[0].PrevHash.ToString(true), "0xee85d489e4428a538f39c1903771e1f222a383f8327c96ed19cc02079149a1fd");
            Assert.AreEqual(tx.Claims[0].PrevIndex, 0);

            Assert.AreEqual(tx.Witness.Length, 1);
            Assert.AreEqual(tx.Witness[0].Hash.ToString(true), "0xbcce7e9d00e0ddf86ba33f444718c47e4bdd1cf4");
            Assert.AreEqual(tx.Witness[0].InvocationScript.ToHexString(true), "0x4019fcb645e67b870a657fe028bcb057f866347d211dc26a25fe0570250f41d0c881113e1820ac55a029e6fc5acab80587f9bebf8b84dbd4503ba816c417b8bf52");
            Assert.AreEqual(tx.Witness[0].VerificationScript.ToHexString(true), "0x21039f07df7861c216de3b78c647b77f8b01404b400a437302b651cdf206ec1af626ac");

            Assert.AreEqual(tx.Inputs.Length, 0);

            Assert.AreEqual(tx.Outputs.Length, 1);
            Assert.AreEqual(tx.Outputs[0].AssetId.ToString(true), "0x602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7");
            Assert.AreEqual(tx.Outputs[0].ScriptHash.ToString(true), "0xbcce7e9d00e0ddf86ba33f444718c47e4bdd1cf4");
            Assert.AreEqual(tx.Outputs[0].Value.ToString(), "0.01144");

            Assert.AreEqual(tx.Version, 0);

            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }

        [TestMethod]
        public void SerializeDeserialize_ContractTransaction()
        {
            // Mainnet Block=47320 / Tx=1

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "80000730cf62fd54fc761f291d07d68088dd81b8b35a7c444f3af8acd78a3ad4ff75d16330aac6d49da8f63cf6442c5f707317bc3e7490029af1a75b83adc0ec3b1b3e1f0f30febc956626564e8318c1f6c11cb4e36d4ded9af1be07e25b40af39d73e4b3dc630ce2e790a02d3794e60109450943358d280389e9cdba1d09f6c105d136f38e731303329124a4a2ea122fa14dbfee41b0fae43a35b29eed33ac81c699202018dfe1530509da7d029445f07d8218fcb73a0cff2acaf76659d1f5eda826b9e896eba991030c214154a649ce8ac5ee97f3c170b6574c122731f757f2a425e5eaeab62d66586012346ed8739bb9d76afb4df8254dc237eff14013041ed694c7dab2e76753d319f0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50080e03779c311005fa99d93303775fe50ca119c327759313eccfa1c01fd0401403d2ccc242d953c3b312f37b1b3aaa21a372cbb7adc1efcfc8e07f3704caa0e82aecbff5f28f17935b6432a571754060881d221a6069270c2e532f58f68248aea408cecfdd1639cae103fcf853bdf44600a6617592928fba26fa9301a222a9b4a384751453c793c2c99460a0e6e324f340abb54daf229b807cf4c8a634e5a4a1f574078891ade2cf73114de7e47b454cb88c71cca614162a7728df5f2511fd20e809ed12827139f6efae0d152cfa411d3e072f63f27f2cef4ee698327f600cc4281ff4056d91a17c56287aba509877eedc2e0541370880fb9bd4cb24a9fc754442048c29975018fbe5d16f27eeb47ca7d17d53d70fbefb8fd5c8144a82c3b72e6ca190cf1542102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae".HexToBytes();
            var tx = (ContractTransaction)_serializer.Deserialize<Transaction>(data);

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0x01a6e985c1c1da04996b3472f04dfcacc4384d8b5b2f21f17367ea92f6a9cb26");
            Assert.AreEqual(tx.Attributes.Length, 7);

            Assert.AreEqual(tx.Attributes[0].Data.ToHexString(true), "0xcf62fd54fc761f291d07d68088dd81b8b35a7c444f3af8acd78a3ad4ff75d163");
            Assert.AreEqual(tx.Attributes[0].Usage, TransactionAttributeUsage.Vote);
            Assert.AreEqual(tx.Attributes[1].Data.ToHexString(true), "0xaac6d49da8f63cf6442c5f707317bc3e7490029af1a75b83adc0ec3b1b3e1f0f");
            Assert.AreEqual(tx.Attributes[1].Usage, TransactionAttributeUsage.Vote);
            Assert.AreEqual(tx.Attributes[2].Data.ToHexString(true), "0xfebc956626564e8318c1f6c11cb4e36d4ded9af1be07e25b40af39d73e4b3dc6");
            Assert.AreEqual(tx.Attributes[2].Usage, TransactionAttributeUsage.Vote);
            Assert.AreEqual(tx.Attributes[3].Data.ToHexString(true), "0xce2e790a02d3794e60109450943358d280389e9cdba1d09f6c105d136f38e731");
            Assert.AreEqual(tx.Attributes[3].Usage, TransactionAttributeUsage.Vote);
            Assert.AreEqual(tx.Attributes[4].Data.ToHexString(true), "0x3329124a4a2ea122fa14dbfee41b0fae43a35b29eed33ac81c699202018dfe15");
            Assert.AreEqual(tx.Attributes[4].Usage, TransactionAttributeUsage.Vote);
            Assert.AreEqual(tx.Attributes[5].Data.ToHexString(true), "0x509da7d029445f07d8218fcb73a0cff2acaf76659d1f5eda826b9e896eba9910");
            Assert.AreEqual(tx.Attributes[5].Usage, TransactionAttributeUsage.Vote);
            Assert.AreEqual(tx.Attributes[6].Data.ToHexString(true), "0xc214154a649ce8ac5ee97f3c170b6574c122731f757f2a425e5eaeab62d66586");
            Assert.AreEqual(tx.Attributes[6].Usage, TransactionAttributeUsage.Vote);

            Assert.AreEqual(tx.Witness.Length, 1);
            Assert.AreEqual(tx.Witness[0].Hash.ToString(true), "0x1cfacc3e315977329c11ca50fe753730939da95f");
            Assert.AreEqual(tx.Witness[0].InvocationScript.ToHexString(true), "0x403d2ccc242d953c3b312f37b1b3aaa21a372cbb7adc1efcfc8e07f3704caa0e82aecbff5f28f17935b6432a571754060881d221a6069270c2e532f58f68248aea408cecfdd1639cae103fcf853bdf44600a6617592928fba26fa9301a222a9b4a384751453c793c2c99460a0e6e324f340abb54daf229b807cf4c8a634e5a4a1f574078891ade2cf73114de7e47b454cb88c71cca614162a7728df5f2511fd20e809ed12827139f6efae0d152cfa411d3e072f63f27f2cef4ee698327f600cc4281ff4056d91a17c56287aba509877eedc2e0541370880fb9bd4cb24a9fc754442048c29975018fbe5d16f27eeb47ca7d17d53d70fbefb8fd5c8144a82c3b72e6ca190c");
            Assert.AreEqual(tx.Witness[0].VerificationScript.ToHexString(true), "0x542102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae");

            Assert.AreEqual(tx.Inputs.Length, 1);
            Assert.AreEqual(tx.Inputs[0].PrevHash.ToString(true), "0x9f313d75762eab7d4c69ed41300114ff7e23dc5482dfb4af769dbb3987ed4623");
            Assert.AreEqual(tx.Inputs[0].PrevIndex, 0);

            Assert.AreEqual(tx.Outputs.Length, 1);
            Assert.AreEqual(tx.Outputs[0].AssetId.ToString(true), "0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b");
            Assert.AreEqual(tx.Outputs[0].ScriptHash.ToString(true), "0x1cfacc3e315977329c11ca50fe753730939da95f");
            Assert.AreEqual(tx.Outputs[0].Value.ToString(), "50000000");

            Assert.AreEqual(tx.Version, 0);
            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }

        [TestMethod]
        public void SerializeDeserialize_IssueTransaction()
        {
            // Mainnet Block=12285 / Tx=3

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "010000017ded1c83bd63e8871c8c2ad57607fe1423e8796606f2f5c2fe25be3f27f89a430000037ded1c83bd63e8871c8c2ad57607fe1423e8796606f2f5c2fe25be3f27f89a43001f8ed117000000f41cdd4b7ec41847443fa36bf8dde0009d7ecebc7ded1c83bd63e8871c8c2ad57607fe1423e8796606f2f5c2fe25be3f27f89a4300e1f5050000000055d6bc2c5a139c894df2344e03d1d2e1fbb7b609e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6040469af32a020000f41cdd4b7ec41847443fa36bf8dde0009d7ecebc014140420d9cdc020c525f95ae8464f7c51d0b84ee820e0073536a658f35428bd44e1941f4b1697a27cbdf3975da3366db6d3e6ec8e4aef3c50eff376a330bf728b5b42321039f07df7861c216de3b78c647b77f8b01404b400a437302b651cdf206ec1af626ac".HexToBytes();
            var tx = (IssueTransaction)_serializer.Deserialize<Transaction>(data);

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0xf1ec2baf76c47bb3460369a0f962321d30423e1329d0c0734d9cd7fce8ed89c2");
            Assert.AreEqual(tx.Attributes.Length, 0);

            Assert.AreEqual(tx.Witness.Length, 1);
            Assert.AreEqual(tx.Witness[0].Hash.ToString(true), "0xbcce7e9d00e0ddf86ba33f444718c47e4bdd1cf4");
            Assert.AreEqual(tx.Witness[0].InvocationScript.ToHexString(true), "0x40420d9cdc020c525f95ae8464f7c51d0b84ee820e0073536a658f35428bd44e1941f4b1697a27cbdf3975da3366db6d3e6ec8e4aef3c50eff376a330bf728b5b4");
            Assert.AreEqual(tx.Witness[0].VerificationScript.ToHexString(true), "0x21039f07df7861c216de3b78c647b77f8b01404b400a437302b651cdf206ec1af626ac");

            Assert.AreEqual(tx.Inputs.Length, 1);
            Assert.AreEqual(tx.Inputs[0].PrevHash.ToString(true), "0x439af8273fbe25fec2f5f2066679e82314fe0776d52a8c1c87e863bd831ced7d");
            Assert.AreEqual(tx.Inputs[0].PrevIndex, 0);

            Assert.AreEqual(tx.Outputs.Length, 3);

            Assert.AreEqual(tx.Outputs[0].AssetId.ToString(true), "0x439af8273fbe25fec2f5f2066679e82314fe0776d52a8c1c87e863bd831ced7d");
            Assert.AreEqual(tx.Outputs[0].ScriptHash.ToString(true), "0xbcce7e9d00e0ddf86ba33f444718c47e4bdd1cf4");
            Assert.AreEqual(tx.Outputs[0].Value.ToString(), "1023");

            Assert.AreEqual(tx.Outputs[1].AssetId.ToString(true), "0x439af8273fbe25fec2f5f2066679e82314fe0776d52a8c1c87e863bd831ced7d");
            Assert.AreEqual(tx.Outputs[1].ScriptHash.ToString(true), "0x09b6b7fbe1d2d1034e34f24d899c135a2cbcd655");
            Assert.AreEqual(tx.Outputs[1].Value.ToString(), "1");

            Assert.AreEqual(tx.Outputs[2].AssetId.ToString(true), "0x602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7");
            Assert.AreEqual(tx.Outputs[2].ScriptHash.ToString(true), "0xbcce7e9d00e0ddf86ba33f444718c47e4bdd1cf4");
            Assert.AreEqual(tx.Outputs[2].Value.ToString(), "23834.98856");

            Assert.AreEqual(tx.Version, 0);
            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }

        [TestMethod]
        public void SerializeDeserialize_MinerTransaction()
        {
            // Mainnet Block=1 / tx=0

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "00004490d0bb00000000".HexToBytes();
            var tx = (MinerTransaction)_serializer.Deserialize<Transaction>(data);

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0xd6ba8b0f381897a59396394e9ce266a3d1d0857b5e3827941c2d2cedc38ef918");
            Assert.AreEqual(tx.Nonce, 3151007812);
            Assert.AreEqual(tx.Witness.Length, 0);
            Assert.AreEqual(tx.Attributes.Length, 0);
            Assert.AreEqual(tx.Inputs.Length, 0);
            Assert.AreEqual(tx.Outputs.Length, 0);
            Assert.AreEqual(tx.Version, 0);

            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }

        [TestMethod]
        public void SerializeDeserialize_InvocationTransaction()
        {
            // Mainnet Block=2421128 / Tx=7

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "d1015e0800e1f50500000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5141e542e30389997d4c076ed65d0a7438719969cd653c1076465706f73697467bd097b2fcf70e1fd30a5c3ef51e662feeafeba0100000000000000000001a50be4db475e02e665229d22e82d8820e5bf8b4022c60a5806d9f1c801672cb10100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000bd097b2fcf70e1fd30a5c3ef51e662feeafeba010141409d689aa663e04da2b74d1eba6608e4a3bacdd416a68b0102df7072e25263b63a7bfd1de1d2d3c951efa3c10c456ab41f6e3a6edaa021a309c6e31e12604132922321021958d772f0cb49220752c74c8ff6e873b8b3f69905d32c2d688cfae570fb98e0ac".HexToBytes();
            var tx = (InvocationTransaction)_serializer.Deserialize<Transaction>(data);

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0xf76206631e9664c3251790ee362039a253bb6763a43343e852499d182883b32b");
            Assert.AreEqual(tx.Attributes.Length, 0);

            Assert.AreEqual(tx.Script.ToHexString(true), "0x0800e1f50500000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5141e542e30389997d4c076ed65d0a7438719969cd653c1076465706f73697467bd097b2fcf70e1fd30a5c3ef51e662feeafeba01");
            Assert.AreEqual(tx.Gas.ToString(), "0");

            Assert.AreEqual(tx.Witness.Length, 1);
            Assert.AreEqual(tx.Witness[0].Hash.ToString(true), "0xd69c96198743a7d065ed76c0d4979938302e541e");
            Assert.AreEqual(tx.Witness[0].InvocationScript.ToHexString(true), "0x409d689aa663e04da2b74d1eba6608e4a3bacdd416a68b0102df7072e25263b63a7bfd1de1d2d3c951efa3c10c456ab41f6e3a6edaa021a309c6e31e1260413292");
            Assert.AreEqual(tx.Witness[0].VerificationScript.ToHexString(true), "0x21021958d772f0cb49220752c74c8ff6e873b8b3f69905d32c2d688cfae570fb98e0ac");

            Assert.AreEqual(tx.Inputs.Length, 1);
            Assert.AreEqual(tx.Inputs[0].PrevHash.ToString(true), "0xb12c6701c8f1d906580ac622408bbfe520882de8229d2265e6025e47dbe40ba5");
            Assert.AreEqual(tx.Inputs[0].PrevIndex, 1);

            Assert.AreEqual(tx.Outputs.Length, 1);

            Assert.AreEqual(tx.Outputs[0].AssetId.ToString(true), "0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b");
            Assert.AreEqual(tx.Outputs[0].ScriptHash.ToString(true), "0x01bafeeafe62e651efc3a530fde170cf2f7b09bd");
            Assert.AreEqual(tx.Outputs[0].Value.ToString(), "1");

            Assert.AreEqual(tx.Version, 1);

            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }

        [TestMethod]
        public void SerializeDeserialize_RegisterTransaction()
        {
            // Mainnet Block=4329 / Tx=1

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "400060335b7b226c616e67223a227a682d434e222c226e616d65223a2248656c6c6f20416e74536861726573204d61696e6e6574227d5d000084d71700000008039f07df7861c216de3b78c647b77f8b01404b400a437302b651cdf206ec1af626f41cdd4b7ec41847443fa36bf8dde0009d7ecebc0001b3ba761da52f1f5c7ce0e069707a3235613e77263b9da5dcff0737f2d09ea1f5000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6040bad59736020000f41cdd4b7ec41847443fa36bf8dde0009d7ecebc0141403af6b2ad6f7630f81eaaff485073c0fe4f337102d1ecf0a48ed9bcfbd4a4bbeb5d7ae26f7dd5e0e04527b313187dfe6a6a0cd7f85fd0ce431f609acce1d34aff2321039f07df7861c216de3b78c647b77f8b01404b400a437302b651cdf206ec1af626ac".HexToBytes();
#pragma warning disable CS0612 // Type or member is obsolete
            var tx = (RegisterTransaction)_serializer.Deserialize<Transaction>(data);
#pragma warning restore CS0612 // Type or member is obsolete

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0x439af8273fbe25fec2f5f2066679e82314fe0776d52a8c1c87e863bd831ced7d");
            Assert.AreEqual(tx.Attributes.Length, 0);

            Assert.AreEqual(tx.Admin.ToString(true), "0xbcce7e9d00e0ddf86ba33f444718c47e4bdd1cf4");
            Assert.AreEqual(tx.Amount.ToString(), "1024");
            Assert.AreEqual(tx.AssetType, AssetType.Token);
            Assert.AreEqual(tx.Name, "[{\"lang\":\"zh-CN\",\"name\":\"Hello AntShares Mainnet\"}]");
            Assert.AreEqual(tx.Precision, 8);
            Assert.AreEqual(tx.Owner.ToString(true), "0x039f07df7861c216de3b78c647b77f8b01404b400a437302b651cdf206ec1af626");

            Assert.AreEqual(tx.Witness.Length, 1);
            Assert.AreEqual(tx.Witness[0].Hash.ToString(true), "0xbcce7e9d00e0ddf86ba33f444718c47e4bdd1cf4");
            Assert.AreEqual(tx.Witness[0].InvocationScript.ToHexString(true), "0x403af6b2ad6f7630f81eaaff485073c0fe4f337102d1ecf0a48ed9bcfbd4a4bbeb5d7ae26f7dd5e0e04527b313187dfe6a6a0cd7f85fd0ce431f609acce1d34aff");
            Assert.AreEqual(tx.Witness[0].VerificationScript.ToHexString(true), "0x21039f07df7861c216de3b78c647b77f8b01404b400a437302b651cdf206ec1af626ac");

            Assert.AreEqual(tx.Inputs.Length, 1);
            Assert.AreEqual(tx.Inputs[0].PrevHash.ToString(true), "0xf5a19ed0f23707ffdca59d3b26773e6135327a7069e0e07c5c1f2fa51d76bab3");
            Assert.AreEqual(tx.Inputs[0].PrevIndex, 0);

            Assert.AreEqual(tx.Outputs.Length, 1);

            Assert.AreEqual(tx.Outputs[0].AssetId.ToString(true), "0x602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7");
            Assert.AreEqual(tx.Outputs[0].ScriptHash.ToString(true), "0xbcce7e9d00e0ddf86ba33f444718c47e4bdd1cf4");
            Assert.AreEqual(tx.Outputs[0].Value.ToString(), "24334.98856");

            Assert.AreEqual(tx.Version, 0);

            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }

        [TestMethod]
        public void SerializeDeserialize_StateTransaction()
        {
            // Mainnet Block=2394986 / Tx=6

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "9000014821025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b640a52656769737465726564010100015a8e6d99a868ae249878516ac521441b3f5098221ce15bcdd712efb58dda494900000001414098910b485b34a52340ac3baab13a63695b5ca44538c968ca6f2aa540654e8394ee08cc7a312144f794e780f56510f5f581e1df41859813d4bb3746b02fab15bb2321025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b64ac".HexToBytes();
            var tx = (StateTransaction)_serializer.Deserialize<Transaction>(data);

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0xccf1404325a601ce7a33291f196bab2c9d4e80581736bfdb5a2325c7aa74427e");
            Assert.AreEqual(tx.Attributes.Length, 0);

            Assert.AreEqual(tx.Descriptors.Length, 1);
            Assert.AreEqual(tx.Descriptors[0].Field, "Registered");
            Assert.AreEqual(tx.Descriptors[0].Key.ToHexString(true), "0x025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b64");
            Assert.AreEqual(tx.Descriptors[0].SystemFee.ToString(), "1000");
            Assert.AreEqual(tx.Descriptors[0].Type, StateType.Validator);
            Assert.AreEqual(tx.Descriptors[0].Value.ToHexString(true), "0x01");

            Assert.AreEqual(tx.Witness.Length, 1);
            Assert.AreEqual(tx.Witness[0].Hash.ToString(true), "0x2a222179d141ac5abf7c69913fb30f9e330faafa");
            Assert.AreEqual(tx.Witness[0].InvocationScript.ToHexString(true), "0x4098910b485b34a52340ac3baab13a63695b5ca44538c968ca6f2aa540654e8394ee08cc7a312144f794e780f56510f5f581e1df41859813d4bb3746b02fab15bb");
            Assert.AreEqual(tx.Witness[0].VerificationScript.ToHexString(true), "0x21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b64ac");

            Assert.AreEqual(tx.Inputs.Length, 1);
            Assert.AreEqual(tx.Inputs[0].PrevHash.ToString(true), "0x4949da8db5ef12d7cd5be11c2298503f1b4421c56a51789824ae68a8996d8e5a");
            Assert.AreEqual(tx.Inputs[0].PrevIndex, 0);

            Assert.AreEqual(tx.Outputs.Length, 0);

            Assert.AreEqual(tx.Version, 0);

            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }

        [TestMethod]
        public void SerializeDeserialize_PublishTransaction()
        {
            // Mainnet Block=917083 / Tx=1

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "d000fd8f09746b4c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c040000000061744c0403000000936c766b9479744c0406000000936c766b9479617cac744c0406000000948c6c766b947275744c0406000000948c6c766b9479641b004c0401000000744c0407000000948c6c766b94727562b207744c0400000000936c766b9479744c0406000000936c766b9479617cac4c04000000009c744c0408000000948c6c766b947275744c0408000000948c6c766b9479641b004c0400000000744c0407000000948c6c766b947275625607744c0404000000936c766b9479744c0409000000948c6c766b947275744c0409000000948c6c766b947964400061744c0401000000936c766b9479744c0400000000948c6c766b947275744c0402000000936c766b9479744c0401000000948c6c766b94727561623d0061744c0402000000936c766b9479744c0400000000948c6c766b947275744c0401000000936c766b9479744c0401000000948c6c766b947275614c0400000000744c0402000000948c6c766b9472754c0400000000744c0403000000948c6c766b94727561682953797374656d2e457865637574696f6e456e67696e652e476574536372697074436f6e7461696e6572616823416e745368617265732e5472616e73616374696f6e2e4765745265666572656e636573744c0404000000948c6c766b94727561744c0404000000948c6c766b9479744c040a000000948c6c766b9472754c0400000000744c040b000000948c6c766b947275629501744c040a000000948c6c766b9479744c040b000000948c6c766b9479c3744c040c000000948c6c766b94727561744c040c000000948c6c766b947961681e416e745368617265732e4f75747075742e4765745363726970744861736861682953797374656d2e457865637574696f6e456e67696e652e476574456e7472795363726970744861736887744c040d000000948c6c766b947275744c040d000000948c6c766b947964c70061744c040c000000948c6c766b947961681b416e745368617265732e4f75747075742e47657441737365744964744c0400000000948c6c766b9479874c04000000009c744c040e000000948c6c766b947275744c040e000000948c6c766b9479641b004c0400000000744c0407000000948c6c766b94727562cd04744c0402000000948c6c766b9479744c040c000000948c6c766b9479616819416e745368617265732e4f75747075742e47657456616c756593744c0402000000948c6c766b9472756161744c040b000000948c6c766b94794c040100000093744c040b000000948c6c766b947275744c040b000000948c6c766b9479744c040a000000948c6c766b9479c09f6350fe61682953797374656d2e457865637574696f6e456e67696e652e476574536372697074436f6e7461696e6572616820416e745368617265732e5472616e73616374696f6e2e4765744f757470757473744c0405000000948c6c766b94727561744c0405000000948c6c766b9479744c040f000000948c6c766b9472754c0400000000744c0410000000948c6c766b947275621c02744c040f000000948c6c766b9479744c0410000000948c6c766b9479c3744c0411000000948c6c766b94727561744c0411000000948c6c766b947961681e416e745368617265732e4f75747075742e4765745363726970744861736861682953797374656d2e457865637574696f6e456e67696e652e476574456e7472795363726970744861736887744c0412000000948c6c766b947275744c0412000000948c6c766b9479644e0161744c0411000000948c6c766b947961681b416e745368617265732e4f75747075742e47657441737365744964744c0400000000948c6c766b947987744c0413000000948c6c766b947275744c0413000000948c6c766b9479644e00744c0402000000948c6c766b9479744c0411000000948c6c766b9479616819416e745368617265732e4f75747075742e47657456616c756594744c0402000000948c6c766b94727562a600744c0411000000948c6c766b947961681b416e745368617265732e4f75747075742e47657441737365744964744c0401000000948c6c766b947987744c0414000000948c6c766b947275744c0414000000948c6c766b9479644b00744c0403000000948c6c766b9479744c0411000000948c6c766b9479616819416e745368617265732e4f75747075742e47657456616c756593744c0403000000948c6c766b9472756161744c0410000000948c6c766b94794c040100000093744c0410000000948c6c766b947275744c0410000000948c6c766b9479744c040f000000948c6c766b9479c09f63c9fd744c0402000000948c6c766b94794c0400000000a1744c0415000000948c6c766b947275744c0415000000948c6c766b9479641b004c0401000000744c0407000000948c6c766b947275622301744c0404000000936c766b9479744c0416000000948c6c766b947275744c0416000000948c6c766b947964720061744c0403000000948c6c766b94794c0400e1f50595744c0402000000948c6c766b9479744c0405000000936c766b9479959f744c0417000000948c6c766b947275744c0417000000948c6c766b9479641b004c0400000000744c0407000000948c6c766b947275628b0061626f0061744c0402000000948c6c766b94794c0400e1f50595744c0403000000948c6c766b9479744c0405000000936c766b947995a0744c0418000000948c6c766b947275744c0418000000948c6c766b9479641b004c0400000000744c0407000000948c6c766b947275621c00614c0401000000744c0407000000948c6c766b947275620300744c0407000000948c6c766b947961748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d746c768c6b946d746c768c6b946d746c768c6b946d746c768c6b946d746c768c6b946d746c768c6b946d746c768c6b946d6c75660703040403010200010e4167656e6379436f6e74726163740e322e302e312d70726576696577310a4572696b205a68616e67126572696b40616e747368617265732e6f7267134167656e637920436f6e747261637420322e3000017d87a0660bbc929d5eccde32787fcfc790c719cff5dd848c48a2a25eff62bf68000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000e1f50500000000ae0211ab29b392cfc71f6bc2a44358634bb22a2e01414086270040b5378a1b9afb5387e705d381afd19f08ee9dd3d5a3ec164132c5085e2e7298a172fabfae827044acc81393e8ee3f3eae514bbb523c6dc2db0b03c456232102abab730e3b83ae352a1d5210d8c4dac9cf2cacc6baf479709d7b989c2151b867ac".HexToBytes();
#pragma warning disable CS0612 // Type or member is obsolete
            var tx = (PublishTransaction)_serializer.Deserialize<Transaction>(data);
#pragma warning restore CS0612 // Type or member is obsolete

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0x353ec4caad7b5c8d6aaa2d2dece5f4d3ca6428d64ce98b667af76340e4427f1d");

            Assert.AreEqual(tx.Author, "Erik Zhang");
            Assert.AreEqual(tx.Name, "AgencyContract");
            Assert.IsFalse(tx.NeedStorage);
            Assert.AreEqual(tx.ReturnType, ContractParameterType.Boolean);
            Assert.AreEqual(tx.CodeVersion, "2.0.1-preview1");
            Assert.AreEqual(tx.Description, "Agency Contract 2.0");
            Assert.AreEqual(tx.Email, "erik@antshares.org");
            Assert.AreEqual(tx.Script.ToHexString(true), "0x746b4c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c04000000004c040000000061744c0403000000936c766b9479744c0406000000936c766b9479617cac744c0406000000948c6c766b947275744c0406000000948c6c766b9479641b004c0401000000744c0407000000948c6c766b94727562b207744c0400000000936c766b9479744c0406000000936c766b9479617cac4c04000000009c744c0408000000948c6c766b947275744c0408000000948c6c766b9479641b004c0400000000744c0407000000948c6c766b947275625607744c0404000000936c766b9479744c0409000000948c6c766b947275744c0409000000948c6c766b947964400061744c0401000000936c766b9479744c0400000000948c6c766b947275744c0402000000936c766b9479744c0401000000948c6c766b94727561623d0061744c0402000000936c766b9479744c0400000000948c6c766b947275744c0401000000936c766b9479744c0401000000948c6c766b947275614c0400000000744c0402000000948c6c766b9472754c0400000000744c0403000000948c6c766b94727561682953797374656d2e457865637574696f6e456e67696e652e476574536372697074436f6e7461696e6572616823416e745368617265732e5472616e73616374696f6e2e4765745265666572656e636573744c0404000000948c6c766b94727561744c0404000000948c6c766b9479744c040a000000948c6c766b9472754c0400000000744c040b000000948c6c766b947275629501744c040a000000948c6c766b9479744c040b000000948c6c766b9479c3744c040c000000948c6c766b94727561744c040c000000948c6c766b947961681e416e745368617265732e4f75747075742e4765745363726970744861736861682953797374656d2e457865637574696f6e456e67696e652e476574456e7472795363726970744861736887744c040d000000948c6c766b947275744c040d000000948c6c766b947964c70061744c040c000000948c6c766b947961681b416e745368617265732e4f75747075742e47657441737365744964744c0400000000948c6c766b9479874c04000000009c744c040e000000948c6c766b947275744c040e000000948c6c766b9479641b004c0400000000744c0407000000948c6c766b94727562cd04744c0402000000948c6c766b9479744c040c000000948c6c766b9479616819416e745368617265732e4f75747075742e47657456616c756593744c0402000000948c6c766b9472756161744c040b000000948c6c766b94794c040100000093744c040b000000948c6c766b947275744c040b000000948c6c766b9479744c040a000000948c6c766b9479c09f6350fe61682953797374656d2e457865637574696f6e456e67696e652e476574536372697074436f6e7461696e6572616820416e745368617265732e5472616e73616374696f6e2e4765744f757470757473744c0405000000948c6c766b94727561744c0405000000948c6c766b9479744c040f000000948c6c766b9472754c0400000000744c0410000000948c6c766b947275621c02744c040f000000948c6c766b9479744c0410000000948c6c766b9479c3744c0411000000948c6c766b94727561744c0411000000948c6c766b947961681e416e745368617265732e4f75747075742e4765745363726970744861736861682953797374656d2e457865637574696f6e456e67696e652e476574456e7472795363726970744861736887744c0412000000948c6c766b947275744c0412000000948c6c766b9479644e0161744c0411000000948c6c766b947961681b416e745368617265732e4f75747075742e47657441737365744964744c0400000000948c6c766b947987744c0413000000948c6c766b947275744c0413000000948c6c766b9479644e00744c0402000000948c6c766b9479744c0411000000948c6c766b9479616819416e745368617265732e4f75747075742e47657456616c756594744c0402000000948c6c766b94727562a600744c0411000000948c6c766b947961681b416e745368617265732e4f75747075742e47657441737365744964744c0401000000948c6c766b947987744c0414000000948c6c766b947275744c0414000000948c6c766b9479644b00744c0403000000948c6c766b9479744c0411000000948c6c766b9479616819416e745368617265732e4f75747075742e47657456616c756593744c0403000000948c6c766b9472756161744c0410000000948c6c766b94794c040100000093744c0410000000948c6c766b947275744c0410000000948c6c766b9479744c040f000000948c6c766b9479c09f63c9fd744c0402000000948c6c766b94794c0400000000a1744c0415000000948c6c766b947275744c0415000000948c6c766b9479641b004c0401000000744c0407000000948c6c766b947275622301744c0404000000936c766b9479744c0416000000948c6c766b947275744c0416000000948c6c766b947964720061744c0403000000948c6c766b94794c0400e1f50595744c0402000000948c6c766b9479744c0405000000936c766b9479959f744c0417000000948c6c766b947275744c0417000000948c6c766b9479641b004c0400000000744c0407000000948c6c766b947275628b0061626f0061744c0402000000948c6c766b94794c0400e1f50595744c0403000000948c6c766b9479744c0405000000936c766b947995a0744c0418000000948c6c766b947275744c0418000000948c6c766b9479641b004c0400000000744c0407000000948c6c766b947275621c00614c0401000000744c0407000000948c6c766b947275620300744c0407000000948c6c766b947961748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d748c6c766b946d746c768c6b946d746c768c6b946d746c768c6b946d746c768c6b946d746c768c6b946d746c768c6b946d746c768c6b946d6c7566");
            Assert.AreEqual(tx.ScriptHash.ToString(true), "0x8a4d2865d01ec8e6add72e3dfdd20c12f44834e3");

            Assert.AreEqual(tx.Witness.Length, 1);
            Assert.AreEqual(tx.Witness[0].Hash.ToString(true), "0x2e2ab24b635843a4c26b1fc7cf92b329ab1102ae");
            Assert.AreEqual(tx.Witness[0].InvocationScript.ToHexString(true), "0x4086270040b5378a1b9afb5387e705d381afd19f08ee9dd3d5a3ec164132c5085e2e7298a172fabfae827044acc81393e8ee3f3eae514bbb523c6dc2db0b03c456");
            Assert.AreEqual(tx.Witness[0].VerificationScript.ToHexString(true), "0x2102abab730e3b83ae352a1d5210d8c4dac9cf2cacc6baf479709d7b989c2151b867ac");

            Assert.AreEqual(tx.Inputs.Length, 1);
            Assert.AreEqual(tx.Inputs[0].PrevHash.ToString(true), "0x68bf62ff5ea2a2488c84ddf5cf19c790c7cf7f7832decc5e9d92bc0b66a0877d");
            Assert.AreEqual(tx.Inputs[0].PrevIndex, 0);

            Assert.AreEqual(tx.Outputs.Length, 1);
            Assert.AreEqual(tx.Outputs[0].AssetId.ToString(true), "0x602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7");
            Assert.AreEqual(tx.Outputs[0].ScriptHash.ToString(true), "0x2e2ab24b635843a4c26b1fc7cf92b329ab1102ae");
            Assert.AreEqual(tx.Outputs[0].Value.ToString(), "1");

            Assert.AreEqual(tx.ParameterList.Length, 7);
            Assert.AreEqual(tx.ParameterList[0], ContractParameterType.Hash160);
            Assert.AreEqual(tx.ParameterList[1], ContractParameterType.Hash256);
            Assert.AreEqual(tx.ParameterList[2], ContractParameterType.Hash256);
            Assert.AreEqual(tx.ParameterList[3], ContractParameterType.Hash160);
            Assert.AreEqual(tx.ParameterList[4], ContractParameterType.Boolean);
            Assert.AreEqual(tx.ParameterList[5], ContractParameterType.Integer);
            Assert.AreEqual(tx.ParameterList[6], ContractParameterType.Signature);

            Assert.AreEqual(tx.Version, 0);
            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }

        [TestMethod]
        public void SerializeDeserialize_EnrollmentTransaction()
        {
            // Mainnet Block=47293 / Tx=1

            var witnessOperationsManager = new WitnessOperationsManager(Crypto.Default);
            var transactionOperationsManager = new TransactionOperationManager(Crypto.Default, this._serializer, witnessOperationsManager, new Mock<ITransactionRepository>().Object, new Mock<IAssetRepository>().Object, new TransactionContext());

            var data = "200003b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c0001f2f5be8a2d2d3d62e1601646b1c8b4ab58b8ee1595caf3e4a0bbfefe029719e2000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000e1f505000000009f2d1729a79436148dc442c25f41335ef9f78bbd014140831597a1f22cba5fb4aa85ade9629a8fd18b46a05ba576a0ab71bcccb6e3fba9593555951f219baeb3368e0c2d722694455403d191d200177afb8f5ac69b5566232103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70cac".HexToBytes();
#pragma warning disable CS0612 // Type or member is obsolete
            var tx = (EnrollmentTransaction)_serializer.Deserialize<Transaction>(data);
#pragma warning restore CS0612 // Type or member is obsolete

            transactionOperationsManager.Sign(tx);

            Assert.AreEqual(tx.Hash.ToString(true), "0x63d175ffd43a8ad7acf83a4f447c5ab3b881dd8880d6071d291f76fc54fd62cf");
            Assert.AreEqual(tx.Attributes.Length, 0);

            Assert.AreEqual(tx.PublicKey.EncodedData.ToHexString(true), "0x03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c");

            Assert.AreEqual(tx.Witness.Length, 1);
            Assert.AreEqual(tx.Witness[0].Hash.ToString(true), "0xbd8bf7f95e33415fc242c48d143694a729172d9f");
            Assert.AreEqual(tx.Witness[0].InvocationScript.ToHexString(true), "0x40831597a1f22cba5fb4aa85ade9629a8fd18b46a05ba576a0ab71bcccb6e3fba9593555951f219baeb3368e0c2d722694455403d191d200177afb8f5ac69b5566");
            Assert.AreEqual(tx.Witness[0].VerificationScript.ToHexString(true), "0x2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70cac");

            Assert.AreEqual(tx.Inputs.Length, 1);
            Assert.AreEqual(tx.Inputs[0].PrevHash.ToString(true), "0xe2199702fefebba0e4f3ca9515eeb858abb4c8b1461660e1623d2d2d8abef5f2");
            Assert.AreEqual(tx.Inputs[0].PrevIndex, 0);

            Assert.AreEqual(tx.Outputs.Length, 1);

            Assert.AreEqual(tx.Outputs[0].AssetId.ToString(true), "0x602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7");
            Assert.AreEqual(tx.Outputs[0].ScriptHash.ToString(true), "0xbd8bf7f95e33415fc242c48d143694a729172d9f");
            Assert.AreEqual(tx.Outputs[0].Value.ToString(), "1");

            Assert.AreEqual(tx.Version, 0);

            CollectionAssert.AreEqual(data, _serializer.Serialize(tx));
        }
    }
}