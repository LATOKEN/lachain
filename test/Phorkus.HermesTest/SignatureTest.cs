using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Org.BouncyCastle.Crypto.Digests;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Math.EC;
using Org.BouncyCastle.Utilities;
using Phorkus.Hermes.Crypto;
using Phorkus.Hermes.Crypto.Key;
using Phorkus.Hermes.Signer;
using Phorkus.Hermes.Signer.Messages;

namespace Phorkus.HermesTest
{
    [TestClass]
    public class SignatureTest
    {
        private static byte[] Sha3(byte[] message)
        {
            var kecc = new KeccakDigest(256);
            kecc.BlockUpdate(message, 0, message.Length);
            var result = new byte[32];
            kecc.DoFinal(result, 0);
            return result;
        }

        public static long CurrentTimeMillis()
        {
            return (long) DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds;
        }

        private void _validateMsgs<T>(IEnumerable<T> ts)
            where T : ISignerMessage, new()
        {
            foreach (var t in ts)
                _validateMsg(t);
        }
        
        private void _validateMsg<T>(T t)
            where T : ISignerMessage, new()
        {
            var bytes = t.ToByteArray();
            var next = new T();
            next.fromByteArray(bytes);
            var bytes2 = next.ToByteArray();
            if (!bytes.SequenceEqual(bytes2))
                throw new Exception("Wooooow!");
        }
        
        [TestMethod]
        public void TestSignature()
        {
            var plainRnd = new Random(123456789);

            long checkpoint = CurrentTimeMillis();

            var privatePaillierKeyShares = new PaillierPrivateThresholdKey[4];
            
            privatePaillierKeyShares[0] = new PaillierPrivateThresholdKey(
                HexUtil.hexToBytes(
                    "0x41000000084dad13cfcc81bc476d9f0402e5d0a7deca7a9b1760a25f7acbcbf0b59e38789cdb1f1bada1e6bf93712230a19262b8b45441a82612989d976299c339bfaadc2104000000020000008500000080000000810000008100000081000000810000000089c348ea2ca8ef9c2c4694375d87ca36210109523e13a5b6c949d50954ba00ab46c9faffc426bbfb973eafb332f80c04faaab740221c300172ce03e2369a3eecc9491448effecc5f292eed9cace6ee74532bed405dca582adab826ce251a9eeb0fb4ef555064d2a627eeaa04ebce8bbe6ba2eddcab70ff71b272b11205e55edd21d8184803ce76a601d33a03c29a82c793fbcce73a5424f9eeb401b33e4cefcd52ed7b663eaaae6fd1fd6c9c797e022fe1fc838c8883428c3e4e751bf7011a04ae26200a3cb9d3d601666da37fdb35f81e3bd28b3c19377d8b795c2903a620f7e5e86d8d6f1fdb97157861caa239dcbdbde1e2ac4e5e37f956be7247c94d9eecedba8a4008953ab959e87ce9b7b465cb01807d4ad907ab5d3594a87849552dd5faa2811f944162fb0b49c83bb6bab3414f3a0745ad6b8c703e5394b5b773d5f7588688a1807aa901757da50618c2dc01f763321d36d67d91d3e259717a5bc68eb4900d7142ddb4b2e2eeb2b344a929f0fc54bbdbe679d3a07a5039653995e46af3b2947a14333d07d0098f5e8d785c3d415c818eca90a900f0627a29c4049b74210447dc2fa99e78f9b9952c9a38c130650b488faedfd2889db1337400cdd6fc31ace75a5639efaba66ce22620637a9a4c1590350f192405b14dfca7e65f3205054a5d55c11fda04e65f5fc9a6c43b511007651ace6f573e54a660039d6e79ce3c32ded3459b379fa9231008889de0e6283407c52651aad6b7edc6fbdb95483c0ec9bad5f33605dd148b7611cdc02f61d74588eca5510c6d8b11dea7e369b4983605c39953aef0ef0fed115e8e5f1f9f72ff517a8a607cb509187878b65b3535b1df6d89260a80f0f328925d7587980b2fa86fd4e1478b0563c855865b0c1dafd1a599f815c78f1eb31ae1f8595e632bee6fb54756c3e18f03001a2b94495b22504751017c1312c804aa59f1c6aecd6d3fb083c55e8ff0655b55335130f46af2fada348b1e081a8e10ac3d3afd85f6bc88125a086627078c3235f801acd2607a65244737e6487b0e8fa9eb16441ef9524cfe2beab750fda0a7e47699ac7025cd4b4f7d3d43c3193101000000830000002a264eb2111084244244950b6d03be299c59d092658bb39b60382af5be2e5c57affbaa0384b93a9374e72e739b6c9426bcb21832965da381fede3dca6da3bb4ff3083fed8d92e93bb05514f6bf7c7e52c424690f116456e225624b5175062c4e2ae7157e00d6ca82fbf9ceab1ca2a2acc6cd6364594f31c27cdfb53075b76a93c71864"),
                4289);
            privatePaillierKeyShares[1] = new PaillierPrivateThresholdKey(
                HexUtil.hexToBytes(
                    "0x41000000084dad13cfcc81bc476d9f0402e5d0a7deca7a9b1760a25f7acbcbf0b59e38789cdb1f1bada1e6bf93712230a19262b8b45441a82612989d976299c339bfaadc2104000000020000008500000080000000810000008100000081000000810000000089c348ea2ca8ef9c2c4694375d87ca36210109523e13a5b6c949d50954ba00ab46c9faffc426bbfb973eafb332f80c04faaab740221c300172ce03e2369a3eecc9491448effecc5f292eed9cace6ee74532bed405dca582adab826ce251a9eeb0fb4ef555064d2a627eeaa04ebce8bbe6ba2eddcab70ff71b272b11205e55edd21d8184803ce76a601d33a03c29a82c793fbcce73a5424f9eeb401b33e4cefcd52ed7b663eaaae6fd1fd6c9c797e022fe1fc838c8883428c3e4e751bf7011a04ae26200a3cb9d3d601666da37fdb35f81e3bd28b3c19377d8b795c2903a620f7e5e86d8d6f1fdb97157861caa239dcbdbde1e2ac4e5e37f956be7247c94d9eecedba8a4008953ab959e87ce9b7b465cb01807d4ad907ab5d3594a87849552dd5faa2811f944162fb0b49c83bb6bab3414f3a0745ad6b8c703e5394b5b773d5f7588688a1807aa901757da50618c2dc01f763321d36d67d91d3e259717a5bc68eb4900d7142ddb4b2e2eeb2b344a929f0fc54bbdbe679d3a07a5039653995e46af3b2947a14333d07d0098f5e8d785c3d415c818eca90a900f0627a29c4049b74210447dc2fa99e78f9b9952c9a38c130650b488faedfd2889db1337400cdd6fc31ace75a5639efaba66ce22620637a9a4c1590350f192405b14dfca7e65f3205054a5d55c11fda04e65f5fc9a6c43b511007651ace6f573e54a660039d6e79ce3c32ded3459b379fa9231008889de0e6283407c52651aad6b7edc6fbdb95483c0ec9bad5f33605dd148b7611cdc02f61d74588eca5510c6d8b11dea7e369b4983605c39953aef0ef0fed115e8e5f1f9f72ff517a8a607cb509187878b65b3535b1df6d89260a80f0f328925d7587980b2fa86fd4e1478b0563c855865b0c1dafd1a599f815c78f1eb31ae1f8595e632bee6fb54756c3e18f03001a2b94495b22504751017c1312c804aa59f1c6aecd6d3fb083c55e8ff0655b55335130f46af2fada348b1e081a8e10ac3d3afd85f6bc88125a086627078c3235f801acd2607a65244737e6487b0e8fa9eb16441ef9524cfe2beab750fda0a7e47699ac7025cd4b4f7d3d43c3193102000000830000002a264eb2111084244244950b6d03be299c59d092658bb39b60382af5be2e5c57affb95b885b098e1746d8d38a17e9a26035d96ad163507e7c349fc425b452a80e2caf6814409636f9d4750623468588fb89f4945caec21c2936620929143b1756dbaec556ad7fd5a28b8a6071c2008f5b9c7fb5906d0dd211ba50c426a8b5e4678faf8"),
                4289);
            privatePaillierKeyShares[2] = new PaillierPrivateThresholdKey(
                HexUtil.hexToBytes(
                    "0x41000000084dad13cfcc81bc476d9f0402e5d0a7deca7a9b1760a25f7acbcbf0b59e38789cdb1f1bada1e6bf93712230a19262b8b45441a82612989d976299c339bfaadc2104000000020000008500000080000000810000008100000081000000810000000089c348ea2ca8ef9c2c4694375d87ca36210109523e13a5b6c949d50954ba00ab46c9faffc426bbfb973eafb332f80c04faaab740221c300172ce03e2369a3eecc9491448effecc5f292eed9cace6ee74532bed405dca582adab826ce251a9eeb0fb4ef555064d2a627eeaa04ebce8bbe6ba2eddcab70ff71b272b11205e55edd21d8184803ce76a601d33a03c29a82c793fbcce73a5424f9eeb401b33e4cefcd52ed7b663eaaae6fd1fd6c9c797e022fe1fc838c8883428c3e4e751bf7011a04ae26200a3cb9d3d601666da37fdb35f81e3bd28b3c19377d8b795c2903a620f7e5e86d8d6f1fdb97157861caa239dcbdbde1e2ac4e5e37f956be7247c94d9eecedba8a4008953ab959e87ce9b7b465cb01807d4ad907ab5d3594a87849552dd5faa2811f944162fb0b49c83bb6bab3414f3a0745ad6b8c703e5394b5b773d5f7588688a1807aa901757da50618c2dc01f763321d36d67d91d3e259717a5bc68eb4900d7142ddb4b2e2eeb2b344a929f0fc54bbdbe679d3a07a5039653995e46af3b2947a14333d07d0098f5e8d785c3d415c818eca90a900f0627a29c4049b74210447dc2fa99e78f9b9952c9a38c130650b488faedfd2889db1337400cdd6fc31ace75a5639efaba66ce22620637a9a4c1590350f192405b14dfca7e65f3205054a5d55c11fda04e65f5fc9a6c43b511007651ace6f573e54a660039d6e79ce3c32ded3459b379fa9231008889de0e6283407c52651aad6b7edc6fbdb95483c0ec9bad5f33605dd148b7611cdc02f61d74588eca5510c6d8b11dea7e369b4983605c39953aef0ef0fed115e8e5f1f9f72ff517a8a607cb509187878b65b3535b1df6d89260a80f0f328925d7587980b2fa86fd4e1478b0563c855865b0c1dafd1a599f815c78f1eb31ae1f8595e632bee6fb54756c3e18f03001a2b94495b22504751017c1312c804aa59f1c6aecd6d3fb083c55e8ff0655b55335130f46af2fada348b1e081a8e10ac3d3afd85f6bc88125a086627078c3235f801acd2607a65244737e6487b0e8fa9eb16441ef9524cfe2beab750fda0a7e47699ac7025cd4b4f7d3d43c3193103000000830000002a264eb2111084244244950b6d03be299c59d092658bb39b60382af5be2e5c57affb816d86a7f72f73f3ebfda790a0254a091527960c6c4d87b5baba48e699b1d28dad14fa7fdda38a398bcda95432ccad1a297c8473eca30169f5d3ad81369cb08ec32cd4d9303155777d631b9d6f3eacc2934db452887fba6a63545f5f51f92add8c"),
                4289);
            privatePaillierKeyShares[3] = new PaillierPrivateThresholdKey(
                HexUtil.hexToBytes(
                    "0x41000000084dad13cfcc81bc476d9f0402e5d0a7deca7a9b1760a25f7acbcbf0b59e38789cdb1f1bada1e6bf93712230a19262b8b45441a82612989d976299c339bfaadc2104000000020000008500000080000000810000008100000081000000810000000089c348ea2ca8ef9c2c4694375d87ca36210109523e13a5b6c949d50954ba00ab46c9faffc426bbfb973eafb332f80c04faaab740221c300172ce03e2369a3eecc9491448effecc5f292eed9cace6ee74532bed405dca582adab826ce251a9eeb0fb4ef555064d2a627eeaa04ebce8bbe6ba2eddcab70ff71b272b11205e55edd21d8184803ce76a601d33a03c29a82c793fbcce73a5424f9eeb401b33e4cefcd52ed7b663eaaae6fd1fd6c9c797e022fe1fc838c8883428c3e4e751bf7011a04ae26200a3cb9d3d601666da37fdb35f81e3bd28b3c19377d8b795c2903a620f7e5e86d8d6f1fdb97157861caa239dcbdbde1e2ac4e5e37f956be7247c94d9eecedba8a4008953ab959e87ce9b7b465cb01807d4ad907ab5d3594a87849552dd5faa2811f944162fb0b49c83bb6bab3414f3a0745ad6b8c703e5394b5b773d5f7588688a1807aa901757da50618c2dc01f763321d36d67d91d3e259717a5bc68eb4900d7142ddb4b2e2eeb2b344a929f0fc54bbdbe679d3a07a5039653995e46af3b2947a14333d07d0098f5e8d785c3d415c818eca90a900f0627a29c4049b74210447dc2fa99e78f9b9952c9a38c130650b488faedfd2889db1337400cdd6fc31ace75a5639efaba66ce22620637a9a4c1590350f192405b14dfca7e65f3205054a5d55c11fda04e65f5fc9a6c43b511007651ace6f573e54a660039d6e79ce3c32ded3459b379fa9231008889de0e6283407c52651aad6b7edc6fbdb95483c0ec9bad5f33605dd148b7611cdc02f61d74588eca5510c6d8b11dea7e369b4983605c39953aef0ef0fed115e8e5f1f9f72ff517a8a607cb509187878b65b3535b1df6d89260a80f0f328925d7587980b2fa86fd4e1478b0563c855865b0c1dafd1a599f815c78f1eb31ae1f8595e632bee6fb54756c3e18f03001a2b94495b22504751017c1312c804aa59f1c6aecd6d3fb083c55e8ff0655b55335130f46af2fada348b1e081a8e10ac3d3afd85f6bc88125a086627078c3235f801acd2607a65244737e6487b0e8fa9eb16441ef9524cfe2beab750fda0a7e47699ac7025cd4b4f7d3d43c3193104000000830000002a264eb2111084244244950b6d03be299c59d092658bb39b60382af5be2e5c57affb6d22879f557d737a4ac2ada2a62490b493a215e3d0b34c217932368808e2c25063a8b0f657d7772bc7391e400d09a19509b33dfbb7836f6dcb14c9bebbc3f3629a043eda6308823654bf1b1ad5879fbd2b4261d433de592fba66543345abdcc020"),
                4289);
            
//            var privatePaillierKeyShares = new PaillierPrivateThresholdKey[3];
//            
//            privatePaillierKeyShares[0] = new PaillierPrivateThresholdKey(
//                HexUtil.hexToBytes(

//                4289, true);
//            privatePaillierKeyShares[1] = new PaillierPrivateThresholdKey(
//                HexUtil.hexToBytes(

//                4289, true);
//            privatePaillierKeyShares[2] = new PaillierPrivateThresholdKey(
//                HexUtil.hexToBytes(

//                4289, true);

            var curveParams = new CurveParams("secp256k1");
            
            PaillierKey paillierKey = privatePaillierKeyShares[0].getPublicKey();
            
            plainRnd = new Random(98428965);
            PublicParameters publicParameters = Util.generateParamsforBitcoin(curveParams, 60, 256, plainRnd, paillierKey);
            
            plainRnd = new Random(58984789);
            
            var players = new List<PlayerSigner>();

            byte[] message =
                HexUtil.hexToBytes("e581b3843b9aca0083030d4094627306090abab3a6e1400e9345bc60c78a8bef570180118080");
            message = Sha3(message);
            
            message = HexUtil.hexToBytes("0xbadcab1e");
            //message = injectEthereumPrefix(message);
            Console.WriteLine("Hashed msg=" + HexUtil.bytesToHex(message));

            BigInteger privateKey =
                new BigInteger("d95d6db65f3e2223703c5d8e205d98e3e6b470f067b0f94f6c6bf73d4301ce48", 16);
            BigInteger randomness = Util.randomFromZnStar(curveParams.Q, plainRnd);
            BigInteger encryptedPrivateKey = new Paillier(paillierKey).encrypt(privateKey, randomness);
            ECPoint publicKey = curveParams.G.Multiply(privateKey.Mod(curveParams.Q)).Normalize();

            int n = privatePaillierKeyShares.Length;
            for (int i = 0; i < n; i++)
            {
                players.Add(new PlayerSigner(
                    publicParameters,
                    curveParams,
                    privatePaillierKeyShares[i],
                    encryptedPrivateKey,
                    message
                ));
            }

            Console.WriteLine("paillierpub=" + paillierKey.getN());
            Console.WriteLine("h1=" + publicParameters.h1);
            Console.WriteLine("h2=" + publicParameters.h2);
            Console.WriteLine("pk.x=" + publicKey.XCoord.ToBigInteger());
            Console.WriteLine("pk.y=" + publicKey.YCoord.ToBigInteger());
            Console.WriteLine("priv=" + encryptedPrivateKey);
            Console.WriteLine("msg=" + HexUtil.bytesToHex(message));

            long currentTime = CurrentTimeMillis();
            Console.WriteLine("Initialization took " + (currentTime - checkpoint) + " ms");
            checkpoint = currentTime;

            List<Round1Message> round1Messages = players.Select(player => player.round1()).ToList();

            currentTime = CurrentTimeMillis();
            Console.WriteLine("R1 took " + (currentTime - checkpoint) + " ms");
            checkpoint = currentTime;
            
            List<Round2Message> round2Messages = new List<Round2Message>();
            for (int i = 0; i < n; ++i)
            {
                _validateMsgs(round1Messages);
                List<Round1Message> inputs = new List<Round1Message>(round1Messages);
                inputs.RemoveAt(i);
                round2Messages.Add(players[i].round2(inputs.ToArray()));
            }

            currentTime = CurrentTimeMillis();
            Console.WriteLine("R2 took " + (currentTime - checkpoint) + " ms");
            checkpoint = currentTime;

            List<Round3Message> round3Messages = new List<Round3Message>();
            for (int i = 0; i < n; ++i)
            {
                _validateMsgs(round2Messages);
                List<Round2Message> inputs = new List<Round2Message>(round2Messages);
                inputs.RemoveAt(i);
                round3Messages.Add(players[i].round3(inputs.ToArray()));
            }

            currentTime = CurrentTimeMillis();
            Console.WriteLine("R3 took " + (currentTime - checkpoint) + " ms");
            checkpoint = currentTime;

            List<Round4Message> round4Messages = new List<Round4Message>();
            for (int i = 0; i < n; ++i)
            {
                _validateMsgs(round3Messages);
                List<Round3Message> inputs = new List<Round3Message>(round3Messages);
                inputs.RemoveAt(i);
                round4Messages.Add(players[i].round4(inputs.ToArray()));
            }

            currentTime = CurrentTimeMillis();
            Console.WriteLine("R4 took " + (currentTime - checkpoint) + " ms");
            checkpoint = currentTime;

            List<Round5Message> round5Messages = new List<Round5Message>();
            for (int i = 0; i < n; ++i)
            {
                _validateMsgs(round4Messages);
                List<Round4Message> inputs = new List<Round4Message>(round4Messages);
                inputs.RemoveAt(i);
                round5Messages.Add(players[i].round5(inputs.ToArray()));
            }

            currentTime = CurrentTimeMillis();
            Console.WriteLine("R5 took " + (currentTime - checkpoint) + " ms");
            checkpoint = currentTime;

            List<Round6Message> round6Messages = new List<Round6Message>();
            for (int i = 0; i < n; ++i)
            {
                _validateMsgs(round5Messages);
                List<Round5Message> inputs = new List<Round5Message>(round5Messages);
                inputs.RemoveAt(i);
                round6Messages.Add(players[i].round6(inputs.ToArray()));
            }

            currentTime = CurrentTimeMillis();
            Console.WriteLine("R6 took " + (currentTime - checkpoint) + " ms");
            checkpoint = currentTime;
           
            List<DSASignature> signatures = new List<DSASignature>();
            for (int i = 0; i < n; ++i)
            {
                List<Round6Message> inputs = new List<Round6Message>(round6Messages);
                inputs.RemoveAt(i);
                signatures.Add(players[i].outputSignature(inputs.ToArray()));
            }

            currentTime = CurrentTimeMillis();
            Console.WriteLine("Signatire recover took " + (currentTime - checkpoint) + " ms");
            checkpoint = currentTime;
            
            foreach (DSASignature signature in signatures) {
                BigInteger mprime = new BigInteger(1, message);
                BigInteger invS = signature.s.ModInverse(curveParams.Q);
                ECPoint validation =
                    publicKey.Multiply(signature.r.Multiply(invS).Mod(curveParams.Q))
                        .Add(curveParams.G.Multiply(mprime.Multiply(invS).Mod(curveParams.Q)));
                BigInteger vX = validation.Normalize().XCoord.ToBigInteger().Mod(curveParams.Q);
                if (!vX.Equals(signature.r))
                    throw new Exception("Signature check failed!");
                
                byte[] publicKeyEncoded = publicKey.GetEncoded(false);
                publicKeyEncoded = Arrays.CopyOfRange(publicKeyEncoded, 1, publicKeyEncoded.Length);
                BigInteger publicKeyBigint = new BigInteger(1, publicKeyEncoded);
                
//                int recId = getRecId(message, signature, publicKeyBigint);
//                if (recId == -1) throw new Exception("Ecrecover failed");
//                int v = recId + 27;
//
//                Console.WriteLine(
//                    "v=" + Numeric.toHexStringNoPrefixZeroPadded(BigInteger.ValueOf(v), 2) +
//                    " r=" + Numeric.toHexStringNoPrefixZeroPadded(signature.r, 64) +
//                    " s=" + Numeric.toHexStringNoPrefixZeroPadded(signature.s, 64)
//                );
            }
        }
        
        /*private int getRecId(byte[] message, DSASignature signature, BigInteger publicKeyBigint) {
            for (int i = 0; i < 4; ++i) {
                ECDSASignature sig = new ECDSASignature(signature.r, signature.s);
                BigInteger recoveredKey = Sign.recoverFromSignature(i, sig, message);
                if (recoveredKey == null) continue;
                if (recoveredKey.equals(publicKeyBigint)) {
                    return i;
                }
            }
            return -1;
        }*/
        
//        private string toHexStringNoPrefixZeroPadded(BigInteger value, int padding)
//        {
//            
//        }
    }
}