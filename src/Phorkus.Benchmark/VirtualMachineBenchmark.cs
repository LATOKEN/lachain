using System;
using Google.Protobuf;
using Phorkus.Core.Config;
using Phorkus.Core.DI;
using Phorkus.Core.DI.Modules;
using Phorkus.Core.DI.SimpleInjector;
using Phorkus.Core.VM;
using Phorkus.Proto;
using Phorkus.Storage.State;
using Phorkus.Utility;
using Phorkus.Utility.Utils;

namespace Phorkus.Benchmark
{
    public class VirtualMachineBenchmark : IBootstrapper
    {
        private readonly IContainer _container;

        public VirtualMachineBenchmark()
        {
            var containerBuilder = new SimpleInjectorContainerBuilder(
                new ConfigManager("config.json"));

            containerBuilder.RegisterModule<BlockchainModule>();
            containerBuilder.RegisterModule<ConfigModule>();
            containerBuilder.RegisterModule<CryptographyModule>();
            containerBuilder.RegisterModule<MessagingModule>();
            containerBuilder.RegisterModule<NetworkModule>();
            containerBuilder.RegisterModule<StorageModule>();

            _container = containerBuilder.Build();
        }

        public void Start(string[] args)
        {
            var virtualMachine = _container.Resolve<IVirtualMachine>();
            var stateManager = _container.Resolve<IStateManager>();

            var hash = UInt160Utils.Zero;
            var contract = new Contract
            {
                ContractAddress = hash,
                ByteCode = ByteString.CopyFrom(
                    ""
                        .HexToBytes())
            };
            if (!virtualMachine.VerifyContract(contract.ByteCode.ToByteArray()))
                throw new Exception("Unable to validate smart-contract code");

            var snapshot = stateManager.NewSnapshot();
            snapshot.Contracts.AddContract(UInt160Utils.Zero, contract);
            stateManager.Approve();

            Console.WriteLine("Contract Hash: " + hash.Buffer.ToHex());

            for (var i = 0; i < 1; ++i)
            {
                var currentTime = TimeUtils.CurrentTimeMillis();
                stateManager.NewSnapshot();

                var sender = "0x6bc32575acb8754886dc283c2c8ac54b1bd93195".HexToBytes().ToUInt160();
                var to = "0xfd893ce89186fc6861d339cb6ab5d75458e3daf3".HexToBytes().ToUInt160();

                /* give to sender 1 token */
                var valueToTransfer = Money.Wei;
                stateManager.CurrentSnapshot.Storage.SetValue(contract.ContractAddress, sender.ToUInt256(),
                    (valueToTransfer * 3).ToUInt256());
                var context = new InvocationContext(sender);

                {
                    /* ERC-20: totalSupply (0x18160ddd) */
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = virtualMachine.InvokeContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status);
                        return;
                    }    
                    Console.WriteLine($"Result: {status.ReturnValue.ToHex()}");
                }
                {
                    /* mint */
                    Console.WriteLine($"\nERC-20: mint({sender.Buffer.ToHex()},{Money.FromDecimal(100)})");
                    var input = ContractEncoder.Encode("mint(address,uint256)", sender, Money.FromDecimal(100));
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = virtualMachine.InvokeContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status);
                        goto exit_mark;
                    }
                    Console.WriteLine($"Result: {status.ReturnValue.ToHex()}");
                }
                {
                    /* ERC-20: totalSupply (0x18160ddd) */
                    Console.WriteLine("\nERC-20: totalSupply()");
                    var input = ContractEncoder.Encode("totalSupply()");
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = virtualMachine.InvokeContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status);
                        goto exit_mark;
                    }                    
                    Console.WriteLine($"Result: {status.ReturnValue.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = virtualMachine.InvokeContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status);
                        goto exit_mark;
                    }                    
                    Console.WriteLine($"Result: {status.ReturnValue.ToHex()}");
                }
                {
                    /* ERC-20: transfer */
                    Console.WriteLine($"\nERC-20: transfer({to.ToHex()},{Money.FromDecimal(50)})");
                    var input = ContractEncoder.Encode("transfer(address,uint256)", to, Money.FromDecimal(50));
                    Console.WriteLine($"ABI: {input.ToHex()}");
                    var status = virtualMachine.InvokeContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status);
                        goto exit_mark;
                    }
                    Console.WriteLine($"Result: {status.ReturnValue.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({sender.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", sender);
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = virtualMachine.InvokeContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status);
                        goto exit_mark;
                    }                    
                    Console.WriteLine($"Result: {status.ReturnValue.ToHex()}");
                }
                {
                    /* ERC-20: balanceOf */
                    Console.WriteLine($"\nERC-20: balanceOf({to.ToHex()}");
                    var input = ContractEncoder.Encode("balanceOf(address)", to);
                    Console.WriteLine("ABI: " + input.ToHex());
                    var status = virtualMachine.InvokeContract(contract, context, input, 100_000_000_000_000UL);
                    if (status.Status != ExecutionStatus.Ok)
                    {
                        stateManager.Rollback();
                        Console.WriteLine("Contract execution failed: " + status);
                        goto exit_mark;
                    }                    
                    Console.WriteLine($"Result: {status.ReturnValue.ToHex()}");
                }
                
                stateManager.Approve();
                exit_mark:
                var elapsedTime = TimeUtils.CurrentTimeMillis() - currentTime;
                Console.WriteLine("Elapsed Time: " + elapsedTime + "ms");
            }
        }
    }
}