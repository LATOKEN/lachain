using System;
using Google.Protobuf;
using Phorkus.Core.Config;
using Phorkus.Core.DI;
using Phorkus.Core.DI.Modules;
using Phorkus.Core.DI.SimpleInjector;
using Phorkus.Core.VM;
using Phorkus.Proto;
using Phorkus.Storage.State;
using Phorkus.Utility;
using Phorkus.Utility.Utils;

namespace Phorkus.Benchmark
{
    public class VirtualMachineBenchmark : IBootstrapper
    {
        private readonly IContainer _container;

        public VirtualMachineBenchmark()
        {
            var containerBuilder = new SimpleInjectorContainerBuilder(
                new ConfigManager("config.json"));

            containerBuilder.RegisterModule<BlockchainModule>();
            containerBuilder.RegisterModule<ConfigModule>();
            containerBuilder.RegisterModule<CryptographyModule>();
            containerBuilder.RegisterModule<MessagingModule>();
            containerBuilder.RegisterModule<NetworkModule>();
            containerBuilder.RegisterModule<StorageModule>();

            _container = containerBuilder.Build();
        }

        public void Start(string[] args)
        {
            var virtualMachine = _container.Resolve<IVirtualMachine>();
            var stateManager = _container.Resolve<IStateManager>();

            var hash = UInt160Utils.Zero;
            var contract = new Contract
            {
                ContractAddress = hash,
                ByteCode = ByteString.CopyFrom(
                    "0061736d010000000117056000017f60037f7f7f0060017f0060027f7f0060000002710603656e760d6765745f63616c6c5f73697a65000003656e760f636f70795f63616c6c5f76616c7565000103656e760b73797374656d5f68616c74000203656e760a7365745f72657475726e000303656e760a6765745f73656e646572000203656e760b77726974655f6576656e740001030201040405017001010105030100020608017f01419088040b071202066d656d6f7279020005737461727400060ab11401ae1403047f047e087f23808080800041f0006b22002480808080000240024002400240024002400240024002400240024002401080808080004104490d0041004104200041206a10818080800002400240200028002022014185fafb1e4a0d000240200141ddc9bca17f4a0d00200141a98bf0dc7b460d0520014198acb4e87d460d02200141a3f0caeb7d470d0b024010808080800041cc00460d0041061082808080000b410441cc00200041206a10818080800041051082808080000c0e0b0240200141016a220241014d0d00200141dec9bca17f470d0b41051082808080000c0e0b20020e020207020b0240200141bf82bfc8014a0d0020014186fafb1e460d06200141db8cf2ef00470d0a0240108080808000220141034a0d0041061082808080000b4100210341002d008888808000410171450d0841002802808880800021030c090b200141c082bfc801460d04200141f0c08a8c03460d022001419284b9fa03470d0941051082808080000c0c0b200041186a4200370300200041106a42003703002000420037030820004200370300200041201083808080000c0b0b41051082808080000c0a0b02401080808080004118460d0041061082808080000b41044118200041206a108180808000200041186a4200370300200041106a42003703002000420037030820004200370300200041201083808080000c090b02401080808080004138460d0041061082808080000b41044138200041206a10818080800020002903442104200029034c2105200029033c210620002903342107200010848080800002402007200620052004848484500d0041041082808080000b200041013a0000200041011083808080000c080b02401080808080004138460d0041061082808080000b41044138200041206a1081808080000c070b410021020240024041002d00888880800022084101710d0041004100360280888080003f00210141004101360288888080004100200141016a36028488808000410121080c010b4100280280888080002202418a807c6a2201418080046d2109200141808004480d00200940001a410041002802848880800020096a3602848880800041002d008888808000210841002802808880800021020b41002002410a6a418080046f22013602808880800020084101712108024002402002450d0020080d004100210141004100360280888080003f00210241004101360288888080004100200241016a360284888080000c010b024020080d004100210141004100360280888080003f00210241004101360288888080004100200241016a360284888080000c010b20014183807c6a2202418080046d2108200241808004480d00200840001a410041002802848880800020086a3602848880800041002802808880800021010b410021024100200141036a418080046f36028088808000200141cca8013b0000200141cb003a00020240024041002d0088888080004101710d0041004100360280888080003f00210841004101360288888080004100200841016a360284888080000c010b41002802808880800022024187807c6a2208418080046d2109200841808004480d00200940001a410041002802848880800020096a3602848880800041002802808880800021020b4100200241076a418080046f3602808880800020024103360000200220012d00003a0004200220012d00013a0005200220012d00023a00062002410710838080800041002d0088888080004101710d0641004100360280888080003f00210141004101360288888080004100200141016a360284888080000c060b02401080808080004124460d0041061082808080000b410441242000108180808000200041206a108480808000200041206a108480808000200041386a4200370300200041306a4200370300200041286a4200370300200042003703202000419ed6f2d67b36026c200041206a200041ec006a41041085808080000c050b41004100360280888080003f00210241004101360288888080004100200241016a360284888080000b2001417c6a2108200120036a41fcff7b6a2202418080046d21090240200241808004480d00200940001a410041002802848880800020096a3602848880800041002802808880800021030b410021024100200820036a418080046f360280888080004104200120031081808080000240024041002d00888880800022094101710d0041004100360280888080003f00210141004101360288888080004100200141016a36028488808000410121090c010b4100280280888080002202418a807c6a2201418080046d2108200141808004480d00200840001a410041002802848880800020086a3602848880800041002d008888808000210941002802808880800021020b41002002410a6a418080046f220136028088808000024020094101710d0041004100360280888080003f00210141004101360288888080004100200141016a3602848880800041012109410021010b410020013602808880800020032d0007220a41087420032d0006220b7241087420032d0005220c7241087420032d0004220d72210220012108024020094101710d004100210841004100360280888080003f00210941004101360288888080004100200941016a360284888080000b200220086a4180807c6a2209418080046d210e0240200941808004480d00200e40001a4100410028028488808000200e6a3602848880800041002802808880800021080b4100200820026a418080046f3602808880800002402001450d0041002d0088888080004101710d0041004100360280888080003f00210141004101360288888080004100200141016a360284888080000b02402002450d00200341086a210e410021010340200e20016a2d0000210902402001417f4a0d0041021082808080000b200820016a20093a00002002200141016a2201470d000b0b410021090240024041002d008888808000410171450d0041002802808880800021090c010b41004100360280888080003f00210141004101360288888080004100200141016a360284888080000b200241046a210e200220096a4184807c6a2201418080046d210f0240200141808004480d00200f40001a4100410028028488808000200f6a3602848880800041002802808880800021090b4100210141002009200e6a418080046f360280888080002009200a3a00032009200b3a00022009200c3a00012009200d3a000002402002450d00034002402001417f4a0d0041021082808080000b200920016a41046a200820016a2d00003a00002002200141016a2201470d000b2009200e1083808080000c020b2009200e10838080800020090d0141002d00888880800021010c020b41051082808080000c020b024041002d00888880800022014101710d0041004100360280888080003f00210141004101360288888080004100200141016a36028488808000410121010b2003450d010b20014101710d0041004100360280888080003f00210141004101360288888080004100200141016a360284888080000b200041f0006a2480808080000b0b1301004180080b0c0000000000000000000000000061046e616d65015a07000d6765745f63616c6c5f73697a65010f636f70795f63616c6c5f76616c7565020b73797374656d5f68616c74030a7365745f72657475726e040a6765745f73656e646572050b77726974655f6576656e740605737461727400750970726f647563657273010c70726f6365737365642d62790105636c616e6755392e302e31202868747470733a2f2f6769746875622e636f6d2f6c6c766d2f6c6c766d2d70726f6a656374206331613061323133333738613435386662656131613563373762333135633764636530386664303529"
                        .HexToBytes())
            };
            if (!virtualMachine.VerifyContract(contract.ByteCode.ToByteArray()))
                throw new Exception("Unable to validate smart-contract code");

            var snapshot = stateManager.NewSnapshot();
            snapshot.Contracts.AddContract(UInt160Utils.Zero, contract);
            stateManager.Approve();

            Console.WriteLine("Contract Hash: " + hash.Buffer.ToHex());

            for (var i = 0; i < 1; ++i)
            {
                var currentTime = TimeUtils.CurrentTimeMillis();
                stateManager.NewSnapshot();

                var sender = "0x6bc32575acb8754886dc283c2c8ac54b1bd93195".HexToBytes().ToUInt160();
                var to = "0xfd893ce89186fc6861d339cb6ab5d75458e3daf3".HexToBytes().ToUInt160();

                /* give to sender 1 token */
                var valueToTransfer = Money.Wei;
                stateManager.CurrentSnapshot.Storage.SetValue(contract.ContractAddress, sender.ToUInt256(),
                    (valueToTransfer * 3).ToUInt256());
                var context = new InvocationContext(sender);

//                /* ERC-20: totalSupply (0x18160ddd) */
//                Console.WriteLine("\nERC-20: totalSupply()");
//                var input = ContractEncoder.Encode("totalSupply()");
//                Console.WriteLine("ABI: " + input.ToHex());
//                var status = virtualMachine.InvokeContract(contract, context, input);
//                if (status != ExecutionStatus.Ok)
//                {
//                    stateManager.Rollback();
//                    Console.WriteLine("Contract execution failed: " + status);
//                    return;
//                }

//                /* ERC-20: balanceOf (0x40c10f19) */
//                Console.WriteLine($"\nERC-20: mint({sender.Buffer.ToHex()},{Money.FromDecimal(100)})");
//                var input = ContractEncoder.Encode("mint(address,uint256)", sender, Money.FromDecimal(100));
//                Console.WriteLine("ABI: " + input.ToHex());
//                var status = virtualMachine.InvokeContract(contract, context, input);
//                if (status != ExecutionStatus.Ok)
//                {
//                    stateManager.Rollback();
//                    Console.WriteLine("Contract execution failed: " + status);
//                    goto exit_mark;
//                }

//                /* ERC-20: totalSupply (0x18160ddd) */
//                Console.WriteLine("\nERC-20: totalSupply()");
//                Console.WriteLine("ABI: " + input.ToHex());
//                input = ContractEncoder.Encode("totalSupply()");
//                status = virtualMachine.InvokeContract(contract, context, input);
//                if (status != ExecutionStatus.Ok)
//                {
//                    stateManager.Rollback();
//                    Console.WriteLine("Contract execution failed: " + status);
//                    goto exit_mark;
//                }

                /* ERC-20: balanceOf (0x0a08231) */
                Console.WriteLine($"\nERC-20: balanceOf({sender.Buffer.ToHex()})");
                var input = ContractEncoder.Encode("balanceOf(address)", sender);
                // var input = ContractEncoder.Encode("totalSupply()");
                Console.WriteLine("ABI: " + input.ToHex());
                var result = virtualMachine.InvokeContract(contract, context, input, 100_000_000_000_000UL);
                if (result.Status != ExecutionStatus.Ok)
                {
                    stateManager.Rollback();
                    Console.WriteLine("Contract execution failed: " + result.Status + ", gasUsed=" + result.GasUsed);
                    goto exit_mark;
                }

                stateManager.Approve();
                Console.WriteLine($"Result: {result.ReturnValue?.ToHex()}");
                exit_mark:
                var elapsedTime = TimeUtils.CurrentTimeMillis() - currentTime;
                Console.WriteLine("Elapsed Time: " + elapsedTime + "ms");
            }
        }
    }
}