syntax = "proto3";
option csharp_namespace = "Lachain.Proto";
option java_package = "com.latoken.proto";
import "default.proto";
import "transaction.proto";
import "block.proto";
import "consensus.proto";

message Peer {
    reserved 1, 2; // deleted
    uint64 timestamp = 3;
    ECDSAPublicKey publicKey = 4;
}

message Ack {
    uint64 message_id = 1;
}

message PingReply {
    uint64 timestamp = 1;
    uint64 block_height = 2;
}

message GetPeersRequest {}

message GetPeersReply {
    repeated Peer peers = 1;
}

message SyncBlocksRequest {
    uint64 from_height = 1;
    uint64 to_height = 2;
    repeated BlockInfo proof = 3;
}

message BlockInfo {
    Block block = 1;
    repeated TransactionReceipt transactions = 2;
}

message SyncBlocksReply {
    repeated BlockInfo blocks = 1;
}

message SyncPoolRequest {
    repeated UInt256 hashes = 1;
}

message SyncPoolReply {
    repeated TransactionReceipt transactions = 1;
}

message NetworkMessage {
    uint64 request_id = 1;
    oneof message {
        PingReply ping_reply = 13;
        ConsensusMessage consensus_message = 21;
        Ack ack = 22;
        GetPeersRequest get_peers_request = 23;
        GetPeersReply get_peers_reply = 24;
        SyncBlocksRequest sync_blocks_request = 27;
        SyncBlocksReply sync_blocks_reply = 28;
        SyncPoolRequest sync_pool_request = 29;
        SyncPoolReply sync_pool_reply = 30;
    }
    reserved 12, 14 to 19, 25, 26; // deleted
}

message MessageBatchContent {
    repeated NetworkMessage messages = 1;
}

message MessageBatch {
    uint32 magic = 1;
    uint64 message_id = 2;
    // This is serialized MessageBatchContent. It's opaque intentionally to make message content deterministic
    // for the sake of signature check. It's required since MessageBatchContent.ToByteArray() can give different results
    // for different processes/languages/platforms or even for different invocations in the same process. 
    bytes content = 3; 
    Signature signature = 4;
    ECDSAPublicKey sender = 5;
}