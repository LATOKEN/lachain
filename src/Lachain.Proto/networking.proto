syntax = "proto3";
option csharp_namespace = "Lachain.Proto";
option java_package = "com.latoken.proto";
import "default.proto";
import "transaction.proto";
import "block.proto";
import "consensus.proto";
import "peer.proto";

message Ack {
    uint64 message_id = 1;
}

message PingRequest {
    uint64 timestamp = 1;
    uint64 block_height = 2;
}

message PingReply {
    uint64 timestamp = 1;
    uint64 block_height = 2;
}

message GetPeersRequest {}

message PeerJoinRequest {
    Peer peer = 1;
}

message PeerJoinReply {
    bool connected = 1;
}

message GetPeersReply {
    repeated Peer peers = 1;
    repeated ECDSAPublicKey public_keys = 2;
}

message GetBlocksByHashesRequest {
    repeated UInt256 block_hashes = 1;
}

message GetBlocksByHashesReply {
    repeated Block blocks = 1;
}

message GetBlocksByHeightRangeRequest {
    uint64 from_height = 1;
    uint64 to_height = 2;
}

message GetBlocksByHeightRangeReply {
    repeated UInt256 block_hashes = 1;
}

message GetTransactionsByHashesRequest {
    repeated UInt256 transaction_hashes = 1;
}

message GetTransactionsByHashesReply {
    repeated TransactionReceipt transactions = 1;
}

message NetworkMessage {
    oneof message {
        PingRequest ping_request = 12;
        PingReply ping_reply = 13;
        GetBlocksByHashesRequest get_blocks_by_hashes_request = 14;
        GetBlocksByHashesReply get_blocks_by_hashes_reply = 15;
        GetBlocksByHeightRangeRequest get_blocks_by_height_range_request = 16;
        GetBlocksByHeightRangeReply get_blocks_by_height_range_reply = 17;
        GetTransactionsByHashesRequest get_transactions_by_hashes_request = 18;
        GetTransactionsByHashesReply get_transactions_by_hashes_reply = 19;
        ConsensusMessage consensus_message = 21;
        Ack ack = 22;
        GetPeersRequest get_peers_request = 23;
        GetPeersReply get_peers_reply = 24;
        PeerJoinRequest peer_join_request = 25;
        PeerJoinReply peer_join_reply = 26;
    }
}

message MessageBatchContent {
    repeated NetworkMessage messages = 1;
}

message MessageBatch {
    uint32 magic = 1;
    uint64 message_id = 2;
    // This is serialized MessageBatchContent. It's opaque intentionally to make message content deterministic
    // for the sake of signature check. It's required since MessageBatchContent.ToByteArray() can give different results
    // for different processes/languages/platforms or even for different invocations in the same process. 
    bytes content = 3; 
    Signature signature = 4;
    ECDSAPublicKey sender = 5;
}