using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http.Headers;
using System.Threading;
using Google.Protobuf;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Math.EC;
using Phorkus.Core.Blockchain;
using Phorkus.Core.Network;
using Phorkus.Core.Storage;
using Phorkus.Core.Utils;
using Phorkus.Crypto;
using Phorkus.Hermes;
using Phorkus.Hermes.Crypto;
using Phorkus.Hermes.Crypto.Key;
using Phorkus.Hermes.Signer;
using Phorkus.Logger;
using Phorkus.Network.Grpc;
using Phorkus.Proto;

namespace Phorkus.Core.Threshold
{
    public class ThresholdManager : IThresholdManager
    {
        private readonly IGlobalRepository _globalRepository;
        private readonly ICrypto _crypto;
        private readonly IValidatorManager _validatorManager;
        private readonly INetworkContext _networkContext;
        private readonly ILogger<IThresholdManager> _logger;

        private readonly IPartyManager _partyManager
            = new PartyManager();

        private readonly IDictionary<PublicKey, SignerState> _signerStates
            = new Dictionary<PublicKey, SignerState>();

        private IList<byte[]>[] _messagePerValidator;

        private readonly object _messageChanged = new object();

        public ThresholdManager(
            IGlobalRepository globalRepository,
            ICrypto crypto,
            IValidatorManager validatorManager,
            INetworkContext networkContext,
            ILogger<IThresholdManager> logger)
        {
            _globalRepository = globalRepository;
            _crypto = crypto;
            _validatorManager = validatorManager;
            _networkContext = networkContext;
            _logger = logger;
            _messagePerValidator = new IList<byte[]>[validatorManager.Validators.Count];
        }

        public ThresholdKey GeneratePrivateKey()
        {
            throw new NotImplementedException();
        }

        public Signature SignData(KeyPair keyPair, string curveType, byte[] message)
        {
            var myIndex = _validatorManager.GetValidatorIndex(keyPair.PublicKey);

            var sharesForTest = new[]
            {



            };

            var pk = new PaillierPrivateThresholdKey(HexUtil.hexToBytes(sharesForTest[myIndex % sharesForTest.Length]),
                4289, true);
            var plainRnd = new LinearRandom(123456789);
            var curveParams = new CurveParams(curveType);
            var privateKey =
                new BigInteger("d95d6db65f3e2223703c5d8e205d98e3e6b470f067b0f94f6c6bf73d4301ce48", 16);
            var randomness = Util.randomFromZnStar(curveParams.Q, plainRnd);
            var encryptedPrivateKey = new Paillier(pk).encrypt(privateKey, randomness);
            var publicKey = curveParams.G.Multiply(privateKey.Mod(curveParams.Q)).Normalize();

            var share = new ThresholdKey
            {
                PrivateKey = new PrivateKey
                {
                    Buffer = ByteString.CopyFrom(encryptedPrivateKey.ToByteArray())
                },
                Validators = {_validatorManager.Validators},
                PublicKey = new PublicKey
                {
                    Buffer = ByteString.CopyFrom(publicKey.GetEncoded(true))
                },
                PrivateShare = new PrivateKey
                {
                    Buffer = ByteString.CopyFrom(pk.toByteArray())
                }
            };

            /* TODO: "i think we have to use password encryption for starting blockchain with private shares" */
//            var share = _globalRepository.GetShare();
            if (share is null)
                throw new Exception("You don't have threshold share");
            var signer = _partyManager.CreateSignerProtocol(
                share.PrivateShare.Buffer.ToByteArray(),
                share.PrivateKey.Buffer,
                share.PublicKey.Buffer.ToByteArray(),
                curveType);
            signer.Initialize(message);
            /* round #1 */
            _logger.LogInformation("Working on round #1");
            var r1 = _Broadcast(signer.Round1(), keyPair, signer);
            _logger.LogInformation("Working on round #2");
            var r2 = _Broadcast(signer.Round2(r1), keyPair, signer);
            _logger.LogInformation("Working on round #3");
            var r3 = _Broadcast(signer.Round3(r2), keyPair, signer);
            _logger.LogInformation("Working on round #4");
            var r4 = _Broadcast(signer.Round4(r3), keyPair, signer);
            _logger.LogInformation("Working on round #5");
            var r5 = _Broadcast(signer.Round5(r4), keyPair, signer);
            _logger.LogInformation("Working on round #6");
            var r6 = _Broadcast(signer.Round6(r5), keyPair, signer);
            _logger.LogInformation("Calculating signature");
            var final = signer.Finalize(r6);
            /* TODO: "calculate V and combine VRS" */
            _logger.LogInformation($"Signatre generated R:{final.r}, S:{final.s}");
            return new Signature
            {
                Buffer = ByteString.CopyFrom(null)
            };
        }

        public ThresholdMessage HandleThresholdMessage(ThresholdMessage thresholdMessage, PublicKey publicKey)
        {
            var validatorIndex = _validatorManager.GetValidatorIndex(publicKey);

            byte[] bytes;
            using (var stream = new MemoryStream(thresholdMessage.Message.ToByteArray()))
            using (var reader = new BinaryReader(stream))
            {
                if (reader.ReadInt32() != validatorIndex)
                    throw new Exception("Invalid validator index specified");
                var state = (SignerState) reader.ReadByte();
                _logger.LogInformation($"Handled state message {state}, from ${validatorIndex}");
                var len = reader.ReadLength();
                bytes = reader.ReadBytes((int) len);
                lock (_messageChanged)
                {
                    var msgs = _ValidatorMessages((int) validatorIndex);
                    if (msgs.Count + 1 != (byte) state)
                        throw new Exception("Invalid message state");
                    msgs.Add(bytes);
                    Monitor.PulseAll(_messageChanged);
                }
            }

            return new ThresholdMessage
            {
                Message = ByteString.CopyFrom(bytes)
            };
        }

        private IEnumerable<T> _Broadcast<T>(T message, KeyPair keyPair, ISignerProtocol signer)
            where T : ISignerMessage, new()
        {
            var validatorIndex = (int) _validatorManager.GetValidatorIndex(keyPair.PublicKey);

            /* serialize */
            byte[] bytes;
            using (var stream = new MemoryStream())
            using (var writer = new BinaryWriter(stream))
            {
                writer.Write(validatorIndex);
                writer.Write((byte) signer.CurrentState);
                var raw = message.ToByteArray();
                writer.WriteLength(raw.Length);
                writer.Write(raw);
                bytes = stream.ToArray();
            }

            _logger.LogInformation($"Broadcasting state {signer.CurrentState}, i'm ${validatorIndex}");

            /* store */
            lock (_messageChanged)
            {
                /*var msgs = _ValidatorMessages(validatorIndex);
                if (msgs.Count + 1 != (byte) signer.CurrentState)
                    throw new Exception("Invalid message state");
                msgs.Add(bytes);
                Monitor.PulseAll(_messageChanged);*/
            }

            /* broadcast */
            foreach (var peer in _networkContext.ActivePeers.Values)
            {
                peer.ThresholdService.ExchangeMessage(new ThresholdMessage
                {
                    Message = ByteString.CopyFrom(bytes)
                }, keyPair);
            }

            /* collect */
            lock (_messageChanged)
            {
                while (!_HasMessages(signer.CurrentState, out var collected))
                {
                    _logger.LogInformation($"Waiting for messages on state {signer.CurrentState}, got only {collected}/{_validatorManager.Validators.Count}");
                    Monitor.Wait(_messageChanged);
                }
            }

            var result = new List<T>();
            foreach (var validator in _validatorManager.Validators)
            {
                var index = _validatorManager.GetValidatorIndex(validator);
                var msgs = _ValidatorMessages((int) index);
                if (msgs.Count < (byte) signer.CurrentState)
                    throw new Exception("Invalid count of user msgs");
                var t = new T();
                t.fromByteArray(msgs.ElementAt((byte) signer.CurrentState - 1));
                result.Add(t);
            }

            return result;
        }

        private bool _HasMessages(SignerState state, out int total)
        {
            var exists = 0;
            foreach (var validator in _validatorManager.Validators)
            {
                var msgs = _ValidatorMessages((int) _validatorManager.GetValidatorIndex(validator));
                if (msgs.Count < (byte) state)
                    continue;
                ++exists;
            }
            total = exists;
            if (exists < _validatorManager.Validators.Count)
                return false;
            return true;
        }

        private IList<byte[]> _ValidatorMessages(int validatorIndex)
        {
            try
            {
                var list = _messagePerValidator.ElementAt(validatorIndex);
                if (list != null)
                    return list;
            }
            catch (ArgumentOutOfRangeException)
            {
                // ignore
            }

            _messagePerValidator[validatorIndex] = new List<byte[]>();
            return _messagePerValidator[validatorIndex];
        }
    }
}