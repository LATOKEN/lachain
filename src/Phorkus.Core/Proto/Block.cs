// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: block.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Phorkus.Core.Proto {

  /// <summary>Holder for reflection information generated from block.proto</summary>
  public static partial class BlockReflection {

    #region Descriptor
    /// <summary>File descriptor for block.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BlockReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtibG9jay5wcm90bxoNZGVmYXVsdC5wcm90bxoObXVsdGlzaWcucHJvdG8i",
            "twEKC0Jsb2NrSGVhZGVyEg8KB3ZlcnNpb24YASABKA0SIQoPcHJldl9ibG9j",
            "a19oYXNoGAIgASgLMgguVUludDI1NhIdCgttZXJrbGVfcm9vdBgDIAEoCzII",
            "LlVJbnQyNTYSEQoJdGltZXN0YW1wGAQgASgEEg0KBWluZGV4GAUgASgEEg0K",
            "BW5vbmNlGAYgASgEEiQKEnRyYW5zYWN0aW9uX2hhc2hlcxgHIAMoCzIILlVJ",
            "bnQyNTYiWgoFQmxvY2sSHAoGaGVhZGVyGAEgASgLMgwuQmxvY2tIZWFkZXIS",
            "FgoEaGFzaBgCIAEoCzIILlVJbnQyNTYSGwoIbXVsdGlzaWcYAyABKAsyCS5N",
            "dWx0aVNpZyJ4CgpCbG9ja1N0YXRlEicKBnN0YXR1cxgBIAEoDjIXLkJsb2Nr",
            "U3RhdGUuQmxvY2tTdGF0dXMiQQoLQmxvY2tTdGF0dXMSFgoSQkxPQ0tfU1RB",
            "VFVTX1JFQURZEAASGgoWQkxPQ0tfU1RBVFVTX0NPTkZJUk1FRBABQhWqAhJQ",
            "aG9ya3VzLkNvcmUuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Phorkus.Core.Proto.DefaultReflection.Descriptor, global::Phorkus.Core.Proto.MultisigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Core.Proto.BlockHeader), global::Phorkus.Core.Proto.BlockHeader.Parser, new[]{ "Version", "PrevBlockHash", "MerkleRoot", "Timestamp", "Index", "Nonce", "TransactionHashes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Core.Proto.Block), global::Phorkus.Core.Proto.Block.Parser, new[]{ "Header", "Hash", "Multisig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Core.Proto.BlockState), global::Phorkus.Core.Proto.BlockState.Parser, new[]{ "Status" }, null, new[]{ typeof(global::Phorkus.Core.Proto.BlockState.Types.BlockStatus) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BlockHeader : pb::IMessage<BlockHeader> {
    private static readonly pb::MessageParser<BlockHeader> _parser = new pb::MessageParser<BlockHeader>(() => new BlockHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Core.Proto.BlockReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader(BlockHeader other) : this() {
      version_ = other.version_;
      prevBlockHash_ = other.prevBlockHash_ != null ? other.prevBlockHash_.Clone() : null;
      merkleRoot_ = other.merkleRoot_ != null ? other.merkleRoot_.Clone() : null;
      timestamp_ = other.timestamp_;
      index_ = other.index_;
      nonce_ = other.nonce_;
      transactionHashes_ = other.transactionHashes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader Clone() {
      return new BlockHeader(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "prev_block_hash" field.</summary>
    public const int PrevBlockHashFieldNumber = 2;
    private global::Phorkus.Core.Proto.UInt256 prevBlockHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Core.Proto.UInt256 PrevBlockHash {
      get { return prevBlockHash_; }
      set {
        prevBlockHash_ = value;
      }
    }

    /// <summary>Field number for the "merkle_root" field.</summary>
    public const int MerkleRootFieldNumber = 3;
    private global::Phorkus.Core.Proto.UInt256 merkleRoot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Core.Proto.UInt256 MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 5;
    private ulong index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 6;
    private ulong nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "transaction_hashes" field.</summary>
    public const int TransactionHashesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Phorkus.Core.Proto.UInt256> _repeated_transactionHashes_codec
        = pb::FieldCodec.ForMessage(58, global::Phorkus.Core.Proto.UInt256.Parser);
    private readonly pbc::RepeatedField<global::Phorkus.Core.Proto.UInt256> transactionHashes_ = new pbc::RepeatedField<global::Phorkus.Core.Proto.UInt256>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Phorkus.Core.Proto.UInt256> TransactionHashes {
      get { return transactionHashes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(PrevBlockHash, other.PrevBlockHash)) return false;
      if (!object.Equals(MerkleRoot, other.MerkleRoot)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Index != other.Index) return false;
      if (Nonce != other.Nonce) return false;
      if(!transactionHashes_.Equals(other.transactionHashes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (prevBlockHash_ != null) hash ^= PrevBlockHash.GetHashCode();
      if (merkleRoot_ != null) hash ^= MerkleRoot.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Index != 0UL) hash ^= Index.GetHashCode();
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      hash ^= transactionHashes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (prevBlockHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrevBlockHash);
      }
      if (merkleRoot_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MerkleRoot);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Timestamp);
      }
      if (Index != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Index);
      }
      if (Nonce != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Nonce);
      }
      transactionHashes_.WriteTo(output, _repeated_transactionHashes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (prevBlockHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevBlockHash);
      }
      if (merkleRoot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerkleRoot);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Index != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Index);
      }
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      size += transactionHashes_.CalculateSize(_repeated_transactionHashes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockHeader other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.prevBlockHash_ != null) {
        if (prevBlockHash_ == null) {
          prevBlockHash_ = new global::Phorkus.Core.Proto.UInt256();
        }
        PrevBlockHash.MergeFrom(other.PrevBlockHash);
      }
      if (other.merkleRoot_ != null) {
        if (merkleRoot_ == null) {
          merkleRoot_ = new global::Phorkus.Core.Proto.UInt256();
        }
        MerkleRoot.MergeFrom(other.MerkleRoot);
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Index != 0UL) {
        Index = other.Index;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      transactionHashes_.Add(other.transactionHashes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            if (prevBlockHash_ == null) {
              prevBlockHash_ = new global::Phorkus.Core.Proto.UInt256();
            }
            input.ReadMessage(prevBlockHash_);
            break;
          }
          case 26: {
            if (merkleRoot_ == null) {
              merkleRoot_ = new global::Phorkus.Core.Proto.UInt256();
            }
            input.ReadMessage(merkleRoot_);
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 40: {
            Index = input.ReadUInt64();
            break;
          }
          case 48: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 58: {
            transactionHashes_.AddEntriesFrom(input, _repeated_transactionHashes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Core.Proto.BlockReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      hash_ = other.hash_ != null ? other.hash_.Clone() : null;
      multisig_ = other.multisig_ != null ? other.multisig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Phorkus.Core.Proto.BlockHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Core.Proto.BlockHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private global::Phorkus.Core.Proto.UInt256 hash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Core.Proto.UInt256 Hash {
      get { return hash_; }
      set {
        hash_ = value;
      }
    }

    /// <summary>Field number for the "multisig" field.</summary>
    public const int MultisigFieldNumber = 3;
    private global::Phorkus.Core.Proto.MultiSig multisig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Core.Proto.MultiSig Multisig {
      get { return multisig_; }
      set {
        multisig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Hash, other.Hash)) return false;
      if (!object.Equals(Multisig, other.Multisig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (hash_ != null) hash ^= Hash.GetHashCode();
      if (multisig_ != null) hash ^= Multisig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (hash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Hash);
      }
      if (multisig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Multisig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (hash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hash);
      }
      if (multisig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Multisig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Phorkus.Core.Proto.BlockHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.hash_ != null) {
        if (hash_ == null) {
          hash_ = new global::Phorkus.Core.Proto.UInt256();
        }
        Hash.MergeFrom(other.Hash);
      }
      if (other.multisig_ != null) {
        if (multisig_ == null) {
          multisig_ = new global::Phorkus.Core.Proto.MultiSig();
        }
        Multisig.MergeFrom(other.Multisig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Phorkus.Core.Proto.BlockHeader();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (hash_ == null) {
              hash_ = new global::Phorkus.Core.Proto.UInt256();
            }
            input.ReadMessage(hash_);
            break;
          }
          case 26: {
            if (multisig_ == null) {
              multisig_ = new global::Phorkus.Core.Proto.MultiSig();
            }
            input.ReadMessage(multisig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockState : pb::IMessage<BlockState> {
    private static readonly pb::MessageParser<BlockState> _parser = new pb::MessageParser<BlockState>(() => new BlockState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Core.Proto.BlockReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockState(BlockState other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockState Clone() {
      return new BlockState(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Phorkus.Core.Proto.BlockState.Types.BlockStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Core.Proto.BlockState.Types.BlockStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockState other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Phorkus.Core.Proto.BlockState.Types.BlockStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BlockStatus {
        [pbr::OriginalName("BLOCK_STATUS_READY")] Ready = 0,
        [pbr::OriginalName("BLOCK_STATUS_CONFIRMED")] Confirmed = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
