// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consensus.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Phorkus.Proto {

  /// <summary>Holder for reflection information generated from consensus.proto</summary>
  public static partial class ConsensusReflection {

    #region Descriptor
    /// <summary>File descriptor for consensus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConsensusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jb25zZW5zdXMucHJvdG8aDWRlZmF1bHQucHJvdG8iXwoJVmFsaWRhdG9y",
            "Eg8KB3ZlcnNpb24YASABKAQSGwoJcHJldl9oYXNoGAIgASgLMgguVUludDI1",
            "NhIXCg92YWxpZGF0b3JfaW5kZXgYAyABKAQSCwoDZXJhGAQgASgEIj4KC0JW",
            "YWxNZXNzYWdlEg0KBXZhbHVlGAEgASgIEhEKCWFncmVlbWVudBgCIAEoBBIN",
            "CgVlcG9jaBgDIAEoBCI9CgpBdXhNZXNzYWdlEg0KBXZhbHVlGAEgASgIEhEK",
            "CWFncmVlbWVudBgCIAEoBBINCgVlcG9jaBgDIAEoBCI/CgtDb25mTWVzc2Fn",
            "ZRIOCgZ2YWx1ZXMYASADKAgSEQoJYWdyZWVtZW50GAIgASgEEg0KBWVwb2No",
            "GAMgASgEIk4KEUNvbW1vbkNvaW5NZXNzYWdlEhcKD3NpZ25hdHVyZV9zaGFy",
            "ZRgBIAEoDBIRCglhZ3JlZW1lbnQYAiABKAQSDQoFZXBvY2gYAyABKAQiuAEK",
            "EENvbnNlbnN1c01lc3NhZ2USHQoJdmFsaWRhdG9yGAEgASgLMgouVmFsaWRh",
            "dG9yEhwKBGJ2YWwYAiABKAsyDC5CVmFsTWVzc2FnZUgAEhoKA2F1eBgDIAEo",
            "CzILLkF1eE1lc3NhZ2VIABIcCgRjb25mGAQgASgLMgwuQ29uZk1lc3NhZ2VI",
            "ABIiCgRjb2luGAUgASgLMhIuQ29tbW9uQ29pbk1lc3NhZ2VIAEIJCgdwYXls",
            "b2FkQiMKEWNvbS5sYXRva2VuLnByb3RvqgINUGhvcmt1cy5Qcm90b2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Phorkus.Proto.DefaultReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Proto.Validator), global::Phorkus.Proto.Validator.Parser, new[]{ "Version", "PrevHash", "ValidatorIndex", "Era" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Proto.BValMessage), global::Phorkus.Proto.BValMessage.Parser, new[]{ "Value", "Agreement", "Epoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Proto.AuxMessage), global::Phorkus.Proto.AuxMessage.Parser, new[]{ "Value", "Agreement", "Epoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Proto.ConfMessage), global::Phorkus.Proto.ConfMessage.Parser, new[]{ "Values", "Agreement", "Epoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Proto.CommonCoinMessage), global::Phorkus.Proto.CommonCoinMessage.Parser, new[]{ "SignatureShare", "Agreement", "Epoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Proto.ConsensusMessage), global::Phorkus.Proto.ConsensusMessage.Parser, new[]{ "Validator", "Bval", "Aux", "Conf", "Coin" }, new[]{ "Payload" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Validator : pb::IMessage<Validator> {
    private static readonly pb::MessageParser<Validator> _parser = new pb::MessageParser<Validator>(() => new Validator());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Validator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Proto.ConsensusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Validator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Validator(Validator other) : this() {
      version_ = other.version_;
      PrevHash = other.prevHash_ != null ? other.PrevHash.Clone() : null;
      validatorIndex_ = other.validatorIndex_;
      era_ = other.era_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Validator Clone() {
      return new Validator(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "prev_hash" field.</summary>
    public const int PrevHashFieldNumber = 2;
    private global::Phorkus.Proto.UInt256 prevHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Proto.UInt256 PrevHash {
      get { return prevHash_; }
      set {
        prevHash_ = value;
      }
    }

    /// <summary>Field number for the "validator_index" field.</summary>
    public const int ValidatorIndexFieldNumber = 3;
    private ulong validatorIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ValidatorIndex {
      get { return validatorIndex_; }
      set {
        validatorIndex_ = value;
      }
    }

    /// <summary>Field number for the "era" field.</summary>
    public const int EraFieldNumber = 4;
    private ulong era_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Era {
      get { return era_; }
      set {
        era_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Validator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Validator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(PrevHash, other.PrevHash)) return false;
      if (ValidatorIndex != other.ValidatorIndex) return false;
      if (Era != other.Era) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (prevHash_ != null) hash ^= PrevHash.GetHashCode();
      if (ValidatorIndex != 0UL) hash ^= ValidatorIndex.GetHashCode();
      if (Era != 0UL) hash ^= Era.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Version);
      }
      if (prevHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrevHash);
      }
      if (ValidatorIndex != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ValidatorIndex);
      }
      if (Era != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Era);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (prevHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevHash);
      }
      if (ValidatorIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ValidatorIndex);
      }
      if (Era != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Era);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Validator other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.prevHash_ != null) {
        if (prevHash_ == null) {
          prevHash_ = new global::Phorkus.Proto.UInt256();
        }
        PrevHash.MergeFrom(other.PrevHash);
      }
      if (other.ValidatorIndex != 0UL) {
        ValidatorIndex = other.ValidatorIndex;
      }
      if (other.Era != 0UL) {
        Era = other.Era;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadUInt64();
            break;
          }
          case 18: {
            if (prevHash_ == null) {
              prevHash_ = new global::Phorkus.Proto.UInt256();
            }
            input.ReadMessage(prevHash_);
            break;
          }
          case 24: {
            ValidatorIndex = input.ReadUInt64();
            break;
          }
          case 32: {
            Era = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BValMessage : pb::IMessage<BValMessage> {
    private static readonly pb::MessageParser<BValMessage> _parser = new pb::MessageParser<BValMessage>(() => new BValMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BValMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Proto.ConsensusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BValMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BValMessage(BValMessage other) : this() {
      value_ = other.value_;
      agreement_ = other.agreement_;
      epoch_ = other.epoch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BValMessage Clone() {
      return new BValMessage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "agreement" field.</summary>
    public const int AgreementFieldNumber = 2;
    private ulong agreement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Agreement {
      get { return agreement_; }
      set {
        agreement_ = value;
      }
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 3;
    private ulong epoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BValMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BValMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Agreement != other.Agreement) return false;
      if (Epoch != other.Epoch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      if (Agreement != 0UL) hash ^= Agreement.GetHashCode();
      if (Epoch != 0UL) hash ^= Epoch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
      if (Agreement != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Agreement);
      }
      if (Epoch != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Epoch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      if (Agreement != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Agreement);
      }
      if (Epoch != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Epoch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BValMessage other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      if (other.Agreement != 0UL) {
        Agreement = other.Agreement;
      }
      if (other.Epoch != 0UL) {
        Epoch = other.Epoch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
          case 16: {
            Agreement = input.ReadUInt64();
            break;
          }
          case 24: {
            Epoch = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuxMessage : pb::IMessage<AuxMessage> {
    private static readonly pb::MessageParser<AuxMessage> _parser = new pb::MessageParser<AuxMessage>(() => new AuxMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuxMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Proto.ConsensusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuxMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuxMessage(AuxMessage other) : this() {
      value_ = other.value_;
      agreement_ = other.agreement_;
      epoch_ = other.epoch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuxMessage Clone() {
      return new AuxMessage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "agreement" field.</summary>
    public const int AgreementFieldNumber = 2;
    private ulong agreement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Agreement {
      get { return agreement_; }
      set {
        agreement_ = value;
      }
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 3;
    private ulong epoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuxMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuxMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Agreement != other.Agreement) return false;
      if (Epoch != other.Epoch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      if (Agreement != 0UL) hash ^= Agreement.GetHashCode();
      if (Epoch != 0UL) hash ^= Epoch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
      if (Agreement != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Agreement);
      }
      if (Epoch != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Epoch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      if (Agreement != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Agreement);
      }
      if (Epoch != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Epoch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuxMessage other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      if (other.Agreement != 0UL) {
        Agreement = other.Agreement;
      }
      if (other.Epoch != 0UL) {
        Epoch = other.Epoch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
          case 16: {
            Agreement = input.ReadUInt64();
            break;
          }
          case 24: {
            Epoch = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfMessage : pb::IMessage<ConfMessage> {
    private static readonly pb::MessageParser<ConfMessage> _parser = new pb::MessageParser<ConfMessage>(() => new ConfMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Proto.ConsensusReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfMessage(ConfMessage other) : this() {
      values_ = other.values_.Clone();
      agreement_ = other.agreement_;
      epoch_ = other.epoch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfMessage Clone() {
      return new ConfMessage(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_values_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> values_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "agreement" field.</summary>
    public const int AgreementFieldNumber = 2;
    private ulong agreement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Agreement {
      get { return agreement_; }
      set {
        agreement_ = value;
      }
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 3;
    private ulong epoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      if (Agreement != other.Agreement) return false;
      if (Epoch != other.Epoch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (Agreement != 0UL) hash ^= Agreement.GetHashCode();
      if (Epoch != 0UL) hash ^= Epoch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (Agreement != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Agreement);
      }
      if (Epoch != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Epoch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (Agreement != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Agreement);
      }
      if (Epoch != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Epoch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfMessage other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.Agreement != 0UL) {
        Agreement = other.Agreement;
      }
      if (other.Epoch != 0UL) {
        Epoch = other.Epoch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 16: {
            Agreement = input.ReadUInt64();
            break;
          }
          case 24: {
            Epoch = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonCoinMessage : pb::IMessage<CommonCoinMessage> {
    private static readonly pb::MessageParser<CommonCoinMessage> _parser = new pb::MessageParser<CommonCoinMessage>(() => new CommonCoinMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonCoinMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Proto.ConsensusReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonCoinMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonCoinMessage(CommonCoinMessage other) : this() {
      signatureShare_ = other.signatureShare_;
      agreement_ = other.agreement_;
      epoch_ = other.epoch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonCoinMessage Clone() {
      return new CommonCoinMessage(this);
    }

    /// <summary>Field number for the "signature_share" field.</summary>
    public const int SignatureShareFieldNumber = 1;
    private pb::ByteString signatureShare_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignatureShare {
      get { return signatureShare_; }
      set {
        signatureShare_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agreement" field.</summary>
    public const int AgreementFieldNumber = 2;
    private ulong agreement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Agreement {
      get { return agreement_; }
      set {
        agreement_ = value;
      }
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 3;
    private ulong epoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonCoinMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonCoinMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignatureShare != other.SignatureShare) return false;
      if (Agreement != other.Agreement) return false;
      if (Epoch != other.Epoch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignatureShare.Length != 0) hash ^= SignatureShare.GetHashCode();
      if (Agreement != 0UL) hash ^= Agreement.GetHashCode();
      if (Epoch != 0UL) hash ^= Epoch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignatureShare.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SignatureShare);
      }
      if (Agreement != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Agreement);
      }
      if (Epoch != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Epoch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignatureShare.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignatureShare);
      }
      if (Agreement != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Agreement);
      }
      if (Epoch != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Epoch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonCoinMessage other) {
      if (other == null) {
        return;
      }
      if (other.SignatureShare.Length != 0) {
        SignatureShare = other.SignatureShare;
      }
      if (other.Agreement != 0UL) {
        Agreement = other.Agreement;
      }
      if (other.Epoch != 0UL) {
        Epoch = other.Epoch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SignatureShare = input.ReadBytes();
            break;
          }
          case 16: {
            Agreement = input.ReadUInt64();
            break;
          }
          case 24: {
            Epoch = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsensusMessage : pb::IMessage<ConsensusMessage> {
    private static readonly pb::MessageParser<ConsensusMessage> _parser = new pb::MessageParser<ConsensusMessage>(() => new ConsensusMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsensusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Proto.ConsensusReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusMessage(ConsensusMessage other) : this() {
      Validator = other.validator_ != null ? other.Validator.Clone() : null;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Bval:
          Bval = other.Bval.Clone();
          break;
        case PayloadOneofCase.Aux:
          Aux = other.Aux.Clone();
          break;
        case PayloadOneofCase.Conf:
          Conf = other.Conf.Clone();
          break;
        case PayloadOneofCase.Coin:
          Coin = other.Coin.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusMessage Clone() {
      return new ConsensusMessage(this);
    }

    /// <summary>Field number for the "validator" field.</summary>
    public const int ValidatorFieldNumber = 1;
    private global::Phorkus.Proto.Validator validator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Proto.Validator Validator {
      get { return validator_; }
      set {
        validator_ = value;
      }
    }

    /// <summary>Field number for the "bval" field.</summary>
    public const int BvalFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Proto.BValMessage Bval {
      get { return payloadCase_ == PayloadOneofCase.Bval ? (global::Phorkus.Proto.BValMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Bval;
      }
    }

    /// <summary>Field number for the "aux" field.</summary>
    public const int AuxFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Proto.AuxMessage Aux {
      get { return payloadCase_ == PayloadOneofCase.Aux ? (global::Phorkus.Proto.AuxMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Aux;
      }
    }

    /// <summary>Field number for the "conf" field.</summary>
    public const int ConfFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Proto.ConfMessage Conf {
      get { return payloadCase_ == PayloadOneofCase.Conf ? (global::Phorkus.Proto.ConfMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Conf;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phorkus.Proto.CommonCoinMessage Coin {
      get { return payloadCase_ == PayloadOneofCase.Coin ? (global::Phorkus.Proto.CommonCoinMessage) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Coin;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Bval = 2,
      Aux = 3,
      Conf = 4,
      Coin = 5,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsensusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsensusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Validator, other.Validator)) return false;
      if (!object.Equals(Bval, other.Bval)) return false;
      if (!object.Equals(Aux, other.Aux)) return false;
      if (!object.Equals(Conf, other.Conf)) return false;
      if (!object.Equals(Coin, other.Coin)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (validator_ != null) hash ^= Validator.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Bval) hash ^= Bval.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Aux) hash ^= Aux.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Conf) hash ^= Conf.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Coin) hash ^= Coin.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (validator_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Validator);
      }
      if (payloadCase_ == PayloadOneofCase.Bval) {
        output.WriteRawTag(18);
        output.WriteMessage(Bval);
      }
      if (payloadCase_ == PayloadOneofCase.Aux) {
        output.WriteRawTag(26);
        output.WriteMessage(Aux);
      }
      if (payloadCase_ == PayloadOneofCase.Conf) {
        output.WriteRawTag(34);
        output.WriteMessage(Conf);
      }
      if (payloadCase_ == PayloadOneofCase.Coin) {
        output.WriteRawTag(42);
        output.WriteMessage(Coin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (validator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Validator);
      }
      if (payloadCase_ == PayloadOneofCase.Bval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bval);
      }
      if (payloadCase_ == PayloadOneofCase.Aux) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aux);
      }
      if (payloadCase_ == PayloadOneofCase.Conf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conf);
      }
      if (payloadCase_ == PayloadOneofCase.Coin) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsensusMessage other) {
      if (other == null) {
        return;
      }
      if (other.validator_ != null) {
        if (validator_ == null) {
          validator_ = new global::Phorkus.Proto.Validator();
        }
        Validator.MergeFrom(other.Validator);
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Bval:
          Bval = other.Bval;
          break;
        case PayloadOneofCase.Aux:
          Aux = other.Aux;
          break;
        case PayloadOneofCase.Conf:
          Conf = other.Conf;
          break;
        case PayloadOneofCase.Coin:
          Coin = other.Coin;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (validator_ == null) {
              validator_ = new global::Phorkus.Proto.Validator();
            }
            input.ReadMessage(validator_);
            break;
          }
          case 18: {
            global::Phorkus.Proto.BValMessage subBuilder = new global::Phorkus.Proto.BValMessage();
            if (payloadCase_ == PayloadOneofCase.Bval) {
              subBuilder.MergeFrom(Bval);
            }
            input.ReadMessage(subBuilder);
            Bval = subBuilder;
            break;
          }
          case 26: {
            global::Phorkus.Proto.AuxMessage subBuilder = new global::Phorkus.Proto.AuxMessage();
            if (payloadCase_ == PayloadOneofCase.Aux) {
              subBuilder.MergeFrom(Aux);
            }
            input.ReadMessage(subBuilder);
            Aux = subBuilder;
            break;
          }
          case 34: {
            global::Phorkus.Proto.ConfMessage subBuilder = new global::Phorkus.Proto.ConfMessage();
            if (payloadCase_ == PayloadOneofCase.Conf) {
              subBuilder.MergeFrom(Conf);
            }
            input.ReadMessage(subBuilder);
            Conf = subBuilder;
            break;
          }
          case 42: {
            global::Phorkus.Proto.CommonCoinMessage subBuilder = new global::Phorkus.Proto.CommonCoinMessage();
            if (payloadCase_ == PayloadOneofCase.Coin) {
              subBuilder.MergeFrom(Coin);
            }
            input.ReadMessage(subBuilder);
            Coin = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
