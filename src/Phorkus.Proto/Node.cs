// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: node.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Phorkus.Proto {

  /// <summary>Holder for reflection information generated from node.proto</summary>
  public static partial class NodeReflection {

    #region Descriptor
    /// <summary>File descriptor for node.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgpub2RlLnByb3RvIo8BCgROb2RlEg8KB3ZlcnNpb24YASABKA0SEQoJdGlt",
            "ZXN0YW1wGAIgASgEEhAKCHNlcnZpY2VzGAMgASgEEgwKBHBvcnQYBCABKA0S",
            "DwoHYWRkcmVzcxgFIAEoCRINCgVub25jZRgGIAEoDRIUCgxibG9ja19oZWln",
            "aHQYByABKAQSDQoFYWdlbnQYCCABKAlCEKoCDVBob3JrdXMuUHJvdG9iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Phorkus.Proto.Node), global::Phorkus.Proto.Node.Parser, new[]{ "Version", "Timestamp", "Services", "Port", "Address", "Nonce", "BlockHeight", "Agent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phorkus.Proto.NodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      version_ = other.version_;
      timestamp_ = other.timestamp_;
      services_ = other.services_;
      port_ = other.port_;
      address_ = other.address_;
      nonce_ = other.nonce_;
      blockHeight_ = other.blockHeight_;
      agent_ = other.agent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 3;
    private ulong services_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Services {
      get { return services_; }
      set {
        services_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 5;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 6;
    private uint nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 7;
    private ulong blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "agent" field.</summary>
    public const int AgentFieldNumber = 8;
    private string agent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Agent {
      get { return agent_; }
      set {
        agent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Services != other.Services) return false;
      if (Port != other.Port) return false;
      if (Address != other.Address) return false;
      if (Nonce != other.Nonce) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (Agent != other.Agent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Services != 0UL) hash ^= Services.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Nonce != 0) hash ^= Nonce.GetHashCode();
      if (BlockHeight != 0UL) hash ^= BlockHeight.GetHashCode();
      if (Agent.Length != 0) hash ^= Agent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (Services != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Services);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Port);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Address);
      }
      if (Nonce != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Nonce);
      }
      if (BlockHeight != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(BlockHeight);
      }
      if (Agent.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Agent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Services != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Services);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Nonce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nonce);
      }
      if (BlockHeight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockHeight);
      }
      if (Agent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Agent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Services != 0UL) {
        Services = other.Services;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Nonce != 0) {
        Nonce = other.Nonce;
      }
      if (other.BlockHeight != 0UL) {
        BlockHeight = other.BlockHeight;
      }
      if (other.Agent.Length != 0) {
        Agent = other.Agent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 24: {
            Services = input.ReadUInt64();
            break;
          }
          case 32: {
            Port = input.ReadUInt32();
            break;
          }
          case 42: {
            Address = input.ReadString();
            break;
          }
          case 48: {
            Nonce = input.ReadUInt32();
            break;
          }
          case 56: {
            BlockHeight = input.ReadUInt64();
            break;
          }
          case 66: {
            Agent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
