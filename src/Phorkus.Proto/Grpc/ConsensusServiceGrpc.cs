// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: consensus_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Phorkus.Network.Grpc {
  public static partial class ConsensusService
  {
    static readonly string __ServiceName = "ConsensusService";

    static readonly grpc::Marshaller<global::Phorkus.Proto.BlockPrepareRequest> __Marshaller_BlockPrepareRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.BlockPrepareRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.BlockPrepareReply> __Marshaller_BlockPrepareReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.BlockPrepareReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.ChangeViewRequest> __Marshaller_ChangeViewRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.ChangeViewRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.ChangeViewReply> __Marshaller_ChangeViewReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.ChangeViewReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Phorkus.Proto.BlockPrepareRequest, global::Phorkus.Proto.BlockPrepareReply> __Method_PrepareBlock = new grpc::Method<global::Phorkus.Proto.BlockPrepareRequest, global::Phorkus.Proto.BlockPrepareReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrepareBlock",
        __Marshaller_BlockPrepareRequest,
        __Marshaller_BlockPrepareReply);

    static readonly grpc::Method<global::Phorkus.Proto.ChangeViewRequest, global::Phorkus.Proto.ChangeViewReply> __Method_ChangeView = new grpc::Method<global::Phorkus.Proto.ChangeViewRequest, global::Phorkus.Proto.ChangeViewReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeView",
        __Marshaller_ChangeViewRequest,
        __Marshaller_ChangeViewReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Phorkus.Network.Grpc.ConsensusServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ConsensusService</summary>
    public abstract partial class ConsensusServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Phorkus.Proto.BlockPrepareReply> PrepareBlock(global::Phorkus.Proto.BlockPrepareRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Phorkus.Proto.ChangeViewReply> ChangeView(global::Phorkus.Proto.ChangeViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ConsensusService</summary>
    public partial class ConsensusServiceClient : grpc::ClientBase<ConsensusServiceClient>
    {
      /// <summary>Creates a new client for ConsensusService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ConsensusServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ConsensusService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ConsensusServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConsensusServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ConsensusServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Phorkus.Proto.BlockPrepareReply PrepareBlock(global::Phorkus.Proto.BlockPrepareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Phorkus.Proto.BlockPrepareReply PrepareBlock(global::Phorkus.Proto.BlockPrepareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrepareBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.BlockPrepareReply> PrepareBlockAsync(global::Phorkus.Proto.BlockPrepareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.BlockPrepareReply> PrepareBlockAsync(global::Phorkus.Proto.BlockPrepareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrepareBlock, null, options, request);
      }
      public virtual global::Phorkus.Proto.ChangeViewReply ChangeView(global::Phorkus.Proto.ChangeViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Phorkus.Proto.ChangeViewReply ChangeView(global::Phorkus.Proto.ChangeViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeView, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.ChangeViewReply> ChangeViewAsync(global::Phorkus.Proto.ChangeViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.ChangeViewReply> ChangeViewAsync(global::Phorkus.Proto.ChangeViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeView, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ConsensusServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConsensusServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConsensusServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PrepareBlock, serviceImpl.PrepareBlock)
          .AddMethod(__Method_ChangeView, serviceImpl.ChangeView).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ConsensusServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PrepareBlock, serviceImpl.PrepareBlock);
      serviceBinder.AddMethod(__Method_ChangeView, serviceImpl.ChangeView);
    }

  }
}
#endregion
