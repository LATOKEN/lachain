// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: account_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Phorkus.Proto.Grpc {
  public static partial class AccountService
  {
    static readonly string __ServiceName = "AccountService";

    static readonly grpc::Marshaller<global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest> __Marshaller_SendAcceptedTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply> __Marshaller_SendAcceptedTransactionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.Grpc.GetBalanceRequest> __Marshaller_GetBalanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.Grpc.GetBalanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.Grpc.GetBalanceReply> __Marshaller_GetBalanceReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.Grpc.GetBalanceReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest> __Marshaller_GetAvailableAssetsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.Grpc.GetAvailableAssetsReply> __Marshaller_GetAvailableAssetsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.Grpc.GetAvailableAssetsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest> __Marshaller_CalcTransactionNonceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Phorkus.Proto.Grpc.CalcTransactionNonceReply> __Marshaller_CalcTransactionNonceReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Phorkus.Proto.Grpc.CalcTransactionNonceReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest, global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply> __Method_SendAcceptedTransaction = new grpc::Method<global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest, global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendAcceptedTransaction",
        __Marshaller_SendAcceptedTransactionRequest,
        __Marshaller_SendAcceptedTransactionReply);

    static readonly grpc::Method<global::Phorkus.Proto.Grpc.GetBalanceRequest, global::Phorkus.Proto.Grpc.GetBalanceReply> __Method_GetBalance = new grpc::Method<global::Phorkus.Proto.Grpc.GetBalanceRequest, global::Phorkus.Proto.Grpc.GetBalanceReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBalance",
        __Marshaller_GetBalanceRequest,
        __Marshaller_GetBalanceReply);

    static readonly grpc::Method<global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest, global::Phorkus.Proto.Grpc.GetAvailableAssetsReply> __Method_GetAvailableAssets = new grpc::Method<global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest, global::Phorkus.Proto.Grpc.GetAvailableAssetsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAvailableAssets",
        __Marshaller_GetAvailableAssetsRequest,
        __Marshaller_GetAvailableAssetsReply);

    static readonly grpc::Method<global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest, global::Phorkus.Proto.Grpc.CalcTransactionNonceReply> __Method_CalcTransactionNonce = new grpc::Method<global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest, global::Phorkus.Proto.Grpc.CalcTransactionNonceReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CalcTransactionNonce",
        __Marshaller_CalcTransactionNonceRequest,
        __Marshaller_CalcTransactionNonceReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Phorkus.Proto.Grpc.AccountServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AccountService</summary>
    public abstract partial class AccountServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply> SendAcceptedTransaction(global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Phorkus.Proto.Grpc.GetBalanceReply> GetBalance(global::Phorkus.Proto.Grpc.GetBalanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Phorkus.Proto.Grpc.GetAvailableAssetsReply> GetAvailableAssets(global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Phorkus.Proto.Grpc.CalcTransactionNonceReply> CalcTransactionNonce(global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AccountService</summary>
    public partial class AccountServiceClient : grpc::ClientBase<AccountServiceClient>
    {
      /// <summary>Creates a new client for AccountService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AccountServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AccountService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AccountServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AccountServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AccountServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply SendAcceptedTransaction(global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAcceptedTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply SendAcceptedTransaction(global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendAcceptedTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply> SendAcceptedTransactionAsync(global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAcceptedTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.Grpc.SendAcceptedTransactionReply> SendAcceptedTransactionAsync(global::Phorkus.Proto.Grpc.SendAcceptedTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendAcceptedTransaction, null, options, request);
      }
      public virtual global::Phorkus.Proto.Grpc.GetBalanceReply GetBalance(global::Phorkus.Proto.Grpc.GetBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Phorkus.Proto.Grpc.GetBalanceReply GetBalance(global::Phorkus.Proto.Grpc.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.Grpc.GetBalanceReply> GetBalanceAsync(global::Phorkus.Proto.Grpc.GetBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.Grpc.GetBalanceReply> GetBalanceAsync(global::Phorkus.Proto.Grpc.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBalance, null, options, request);
      }
      public virtual global::Phorkus.Proto.Grpc.GetAvailableAssetsReply GetAvailableAssets(global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableAssets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Phorkus.Proto.Grpc.GetAvailableAssetsReply GetAvailableAssets(global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAvailableAssets, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.Grpc.GetAvailableAssetsReply> GetAvailableAssetsAsync(global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableAssetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.Grpc.GetAvailableAssetsReply> GetAvailableAssetsAsync(global::Phorkus.Proto.Grpc.GetAvailableAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAvailableAssets, null, options, request);
      }
      public virtual global::Phorkus.Proto.Grpc.CalcTransactionNonceReply CalcTransactionNonce(global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CalcTransactionNonce(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Phorkus.Proto.Grpc.CalcTransactionNonceReply CalcTransactionNonce(global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CalcTransactionNonce, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.Grpc.CalcTransactionNonceReply> CalcTransactionNonceAsync(global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CalcTransactionNonceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Phorkus.Proto.Grpc.CalcTransactionNonceReply> CalcTransactionNonceAsync(global::Phorkus.Proto.Grpc.CalcTransactionNonceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CalcTransactionNonce, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AccountServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AccountServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AccountServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendAcceptedTransaction, serviceImpl.SendAcceptedTransaction)
          .AddMethod(__Method_GetBalance, serviceImpl.GetBalance)
          .AddMethod(__Method_GetAvailableAssets, serviceImpl.GetAvailableAssets)
          .AddMethod(__Method_CalcTransactionNonce, serviceImpl.CalcTransactionNonce).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AccountServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SendAcceptedTransaction, serviceImpl.SendAcceptedTransaction);
      serviceBinder.AddMethod(__Method_GetBalance, serviceImpl.GetBalance);
      serviceBinder.AddMethod(__Method_GetAvailableAssets, serviceImpl.GetAvailableAssets);
      serviceBinder.AddMethod(__Method_CalcTransactionNonce, serviceImpl.CalcTransactionNonce);
    }

  }
}
#endregion
