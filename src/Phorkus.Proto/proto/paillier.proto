syntax = "proto3";
option csharp_namespace = "Phorkus.Proto";

import "default.proto";

message BgwPrivateParams {
    uint32 i = 1; // the id of the party
    uint32 n = 2; // the number of parties
    bytes pi = 3; // the contribution of party Pi to p
    bytes qi = 4; // the contribution of party Pi to q
    bytes fi = 5; // the polynomial used to share pi
    bytes gi = 6; // the polynomial used to share qi
    bytes hi = 7; // the polynomial used to share Ni
}

message BgwPublicParams {
    uint32 i = 1; // the id of the party
    uint32 n = 2; // the number of parties
    uint32 j = 3; // the id of the party for which these shares were generated
    bytes pij = 4; // the share pij = f(j) of party i's pi generated for party j
    bytes qij = 5; // the share qij = g(j) of party i's qi generated for party j
    bytes hij = 6; // the share hij = h(j) of party i's zero generated for party j
}

// Kirill:
// - Complaint
message Complaint {
    uint32 id = 1; // the id of the party that produced the invalid share
}
// - BGWNPoint
message BGWNPoint {
    bytes point = 1; // a share of Theta
}

// - ThetaPoint
message ThetaPoint {
    bytes thetai = 1; // a share of N
}
// - VerificationKey
message VerificationKey {
    bytes verificationKey = 1; // A verification key
}
// - QiTestForRound
message QiTestForRound {
    bytes Qi = 1; // a Qi in the Biprimality test
    uint32 round = 2; // the current round number in the Biprimality test
}
// - Participants (????)
message Participants {
    bytes participants = 1; // 
}
// - CandidateN
message CandidateN {
    bytes N = 1; //  the candidate to RSA modulus   
    BgwPrivateParams bgwPrivateParameters = 2; // the BGW private parameters associated with the candidate to RSA modulus
}
// - BiprimalityTestResult
message BiprimalityTestResult {    
    bytes N = 1; // the candidate to RSA modulus		
    BgwPrivateParams bgwPrivateParameters = 2; // The BGW private parameters associated with N    
    bool passes = 3; // the result of the Biprimality test. True if succeed, false if not
}
//
// Dmitry:
// - BGWPrivateParameters
// - BGWPublicParameters
// - KeysDerivationPrivateParameters (bullshit)
// - KeysDerivationPublicParameters (bullshit)
// - ProtocolParameters
// 